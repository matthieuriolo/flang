// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/flang.jflex

package ch.ffhs.fac.flang.parser;

/*
 FLang Scanner
*/

import java_cup.runtime.*;
import ch.ffhs.fac.flang.parser.exceptions.IllegalSymbol;
import java.math.BigDecimal;

/**
 * Autogenerated lexer for Flang - see flang.jflex
 */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\41\u2000\1\u1100\1\u3100\1\u3200\1\u1100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00"+
    "\1\u5000\1\u5100\1\u2000\3\u1100\1\u5200\1\u5300\1\u5400\12\u2000"+
    "\4\u1100\1\u5500\17\u2000\2\u1100\1\u5600\41\u2000\2\u1100\1\u5700"+
    "\1\u5800\2\u2000\1\u5900\1\u5a00\27\u1100\1\u5b00\2\u1100\1\u5c00"+
    "\45\u2000\1\u1100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000"+
    "\1\u6100\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600"+
    "\5\u2000\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000"+
    "\1\u6c00\2\u2000\1\u6d00\16\u2000\246\u1100\1\u6e00\20\u1100\1\u6f00"+
    "\1\u7000\25\u1100\1\u7100\34\u1100\1\u7200\14\u2000\2\u1100\1\u7300"+
    "\u0b06\u2000\1\u7400\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\3\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\21\1\22"+
    "\1\0\1\23\1\24\1\25\2\0\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\30\1\34\1\35\2\30\1\36"+
    "\1\37\1\40\1\41\2\30\1\42\1\43\1\44\1\45"+
    "\1\30\1\46\1\30\1\47\1\30\1\0\1\50\2\0"+
    "\1\51\1\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\30\1\34\1\35\2\30\1\36\1\37\1\40\1\41"+
    "\2\30\1\42\1\43\1\44\1\45\1\30\1\46\1\30"+
    "\1\47\1\30\1\52\1\0\1\53\44\0\4\7\4\0"+
    "\1\30\12\0\1\30\4\0\1\30\5\0\27\30\1\0"+
    "\37\30\1\0\70\30\2\35\115\30\1\43\u0142\30\4\0"+
    "\14\30\16\0\5\30\7\0\1\30\1\0\1\30\21\0"+
    "\160\54\5\30\1\0\2\30\2\0\4\30\1\0\1\30"+
    "\6\0\1\30\1\0\3\30\1\0\1\30\1\0\24\30"+
    "\1\0\123\30\1\0\213\30\1\0\7\54\246\30\1\0"+
    "\46\30\2\0\1\30\6\0\1\54\47\30\1\54\6\0"+
    "\1\7\1\0\55\54\1\0\1\54\1\0\2\54\1\0"+
    "\2\54\1\0\1\54\10\0\33\30\4\0\1\54\3\30"+
    "\30\0\1\7\4\0\13\54\5\0\53\30\25\54\12\20"+
    "\4\0\2\30\1\54\143\30\1\0\1\30\7\54\2\0"+
    "\6\54\2\30\2\54\1\0\4\54\2\30\12\20\3\30"+
    "\2\0\1\30\20\0\1\30\1\54\36\30\33\54\2\0"+
    "\131\30\13\54\1\30\16\0\12\20\41\30\11\54\2\30"+
    "\4\0\1\30\2\0\1\54\2\0\26\30\4\54\1\30"+
    "\11\54\1\30\3\54\1\30\5\54\22\0\31\30\3\54"+
    "\4\0\13\30\65\0\25\30\1\0\10\30\25\0\17\54"+
    "\1\0\41\54\66\30\3\54\1\30\22\54\1\30\7\54"+
    "\12\30\2\54\2\0\12\20\1\0\20\30\3\54\1\0"+
    "\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\1\30\3\0\4\30\2\0\1\54\1\30\7\54\2\0"+
    "\2\54\2\0\3\54\1\30\10\0\1\54\4\0\2\30"+
    "\1\0\3\30\2\54\2\0\12\20\2\30\2\7\7\0"+
    "\1\7\1\30\1\0\1\54\2\0\3\54\1\0\6\30"+
    "\4\0\2\30\2\0\26\30\1\0\7\30\1\0\2\30"+
    "\1\0\2\30\1\0\2\30\2\0\1\54\1\0\5\54"+
    "\4\0\2\54\2\0\3\54\3\0\1\54\7\0\4\30"+
    "\1\0\1\30\7\0\12\20\2\54\3\30\1\54\13\0"+
    "\3\54\1\0\11\30\1\0\3\30\1\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\2\0\1\54\1\30"+
    "\10\54\1\0\3\54\1\0\3\54\2\0\1\30\17\0"+
    "\2\30\2\54\2\0\12\20\1\0\1\7\7\0\1\30"+
    "\6\54\1\0\3\54\1\0\10\30\2\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\5\30\2\0"+
    "\1\54\1\30\7\54\2\0\2\54\2\0\3\54\10\0"+
    "\2\54\4\0\2\30\1\0\3\30\2\54\2\0\12\20"+
    "\1\0\1\30\20\0\1\54\1\30\1\0\6\30\3\0"+
    "\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0"+
    "\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0"+
    "\5\54\3\0\3\54\1\0\4\54\2\0\1\30\6\0"+
    "\1\54\16\0\12\20\11\0\1\7\6\0\5\54\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\20\30\3\0\1\30"+
    "\7\54\1\0\3\54\1\0\4\54\7\0\2\54\1\0"+
    "\3\30\5\0\2\30\2\54\2\0\12\20\20\0\1\30"+
    "\3\54\1\0\10\30\1\0\3\30\1\0\27\30\1\0"+
    "\12\30\1\0\5\30\2\0\1\54\1\30\7\54\1\0"+
    "\3\54\1\0\4\54\7\0\2\54\7\0\1\30\1\0"+
    "\2\30\2\54\2\0\12\20\1\0\2\30\15\0\4\54"+
    "\1\0\10\30\1\0\3\30\1\0\51\30\2\54\1\30"+
    "\7\54\1\0\3\54\1\0\4\54\1\30\5\0\3\30"+
    "\1\54\7\0\3\30\2\54\2\0\12\20\12\0\6\30"+
    "\2\0\2\54\1\0\22\30\3\0\30\30\1\0\11\30"+
    "\1\0\1\30\2\0\7\30\3\0\1\54\4\0\6\54"+
    "\1\0\1\54\1\0\10\54\6\0\12\20\2\0\2\54"+
    "\15\0\60\30\1\54\2\30\7\54\4\0\1\7\7\30"+
    "\10\54\1\0\12\20\47\0\2\30\1\0\1\30\1\0"+
    "\1\54\2\30\1\54\1\30\1\0\1\54\1\30\6\54"+
    "\4\30\1\54\7\30\1\54\3\30\1\0\1\30\1\0"+
    "\1\30\2\54\2\30\1\54\4\30\1\54\2\30\11\54"+
    "\1\30\2\0\5\30\1\0\1\30\1\0\6\54\2\0"+
    "\12\20\2\0\4\30\40\0\1\30\27\0\2\54\6\0"+
    "\12\20\13\0\1\54\1\0\1\54\1\0\1\54\4\0"+
    "\2\54\10\30\1\0\44\30\4\0\24\54\1\0\2\54"+
    "\5\30\13\54\1\0\44\54\11\0\1\54\71\0\53\30"+
    "\24\54\1\30\12\20\6\0\6\30\4\54\4\30\3\54"+
    "\1\30\3\54\2\30\7\54\3\30\4\54\15\30\14\54"+
    "\1\30\1\54\12\20\4\54\2\0\46\30\1\0\1\30"+
    "\5\0\1\30\2\0\53\30\1\0\u014d\30\1\0\4\30"+
    "\2\0\7\30\1\0\1\30\1\0\4\30\2\0\51\30"+
    "\1\0\4\30\2\0\41\30\1\0\4\30\2\0\7\30"+
    "\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30"+
    "\1\0\4\30\2\0\103\30\2\0\3\54\40\0\20\30"+
    "\20\0\126\30\2\0\6\30\3\0\u016c\30\2\0\21\30"+
    "\1\0\32\30\5\0\113\30\3\0\13\30\7\0\15\30"+
    "\1\0\4\30\3\54\13\0\22\30\3\54\13\0\22\30"+
    "\2\54\14\0\15\30\1\0\3\30\1\0\2\54\14\0"+
    "\64\30\40\54\3\0\1\30\3\0\1\7\1\30\1\54"+
    "\2\0\12\20\41\0\3\54\2\0\12\20\6\0\130\30"+
    "\1\54\7\0\5\30\2\54\42\30\1\54\1\30\5\0"+
    "\106\30\12\0\37\30\1\0\14\54\4\0\14\54\12\0"+
    "\12\20\36\30\2\0\5\30\13\0\54\30\4\0\32\30"+
    "\6\0\12\20\46\0\27\30\5\54\4\0\65\30\12\54"+
    "\1\0\35\54\2\0\1\54\12\20\6\0\12\20\15\0"+
    "\1\30\10\0\17\54\101\0\5\54\57\30\21\54\7\30"+
    "\4\0\12\20\21\0\11\54\14\0\3\54\36\30\15\54"+
    "\2\30\12\20\54\30\16\54\14\0\44\30\24\54\10\0"+
    "\12\20\3\0\3\30\12\20\44\30\2\0\11\30\7\0"+
    "\53\54\2\0\3\54\20\0\3\54\1\0\25\54\4\30"+
    "\1\54\4\30\3\54\2\30\4\54\5\0\300\30\72\54"+
    "\1\0\5\54\26\30\2\0\6\30\2\0\46\30\2\0"+
    "\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\37\30\2\0\65\30\1\0\7\30\1\0"+
    "\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0"+
    "\6\30\4\0\15\30\5\0\3\30\1\0\7\30\102\0"+
    "\2\30\23\0\1\30\34\0\1\30\15\0\1\30\20\0"+
    "\15\30\3\0\40\7\20\0\41\54\21\0\1\30\4\0"+
    "\1\30\2\0\12\30\1\0\1\30\3\0\5\30\6\0"+
    "\1\30\1\0\1\30\1\0\1\30\1\0\4\30\1\0"+
    "\13\30\2\0\4\30\5\0\5\30\4\0\1\30\21\0"+
    "\51\30\u022d\0\64\54\26\0\57\30\1\0\57\30\1\0"+
    "\205\30\6\0\4\30\3\54\2\30\14\0\46\30\1\0"+
    "\1\30\5\0\1\30\2\0\70\30\7\0\1\30\17\0"+
    "\1\54\27\30\11\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30"+
    "\1\0\7\30\1\0\40\54\57\0\1\30\325\0\3\30"+
    "\31\0\11\30\6\54\1\0\5\30\2\0\5\30\4\0"+
    "\126\30\2\0\2\54\2\0\3\30\1\0\132\30\1\0"+
    "\4\30\5\0\52\30\1\54\1\0\136\30\21\0\33\30"+
    "\65\0\306\30\112\0\353\30\5\54\20\0\215\30\103\0"+
    "\56\30\2\0\15\30\3\0\20\30\12\20\2\30\24\0"+
    "\57\30\4\54\1\0\12\54\1\0\37\30\2\54\120\30"+
    "\2\54\45\0\11\30\2\0\147\30\2\0\44\30\1\54"+
    "\10\30\10\54\2\0\5\54\60\0\13\30\1\54\3\30"+
    "\1\54\4\30\1\54\27\30\5\54\20\0\1\7\7\0"+
    "\64\30\14\0\2\54\62\30\22\54\12\0\12\20\6\0"+
    "\22\54\6\30\3\0\1\30\1\0\1\30\2\54\12\20"+
    "\34\30\10\54\2\0\27\30\15\54\14\0\35\30\3\0"+
    "\4\54\57\30\16\54\16\0\1\30\12\20\6\0\5\30"+
    "\1\54\12\30\12\20\5\30\1\0\51\30\16\54\11\0"+
    "\3\30\1\54\10\30\2\54\2\0\12\20\6\0\27\30"+
    "\3\0\1\30\3\54\62\30\1\54\1\30\3\54\2\30"+
    "\2\54\5\30\2\54\1\30\1\54\1\30\30\0\3\30"+
    "\2\0\13\30\5\54\2\0\3\30\2\54\12\0\6\30"+
    "\2\0\6\30\2\0\6\30\11\0\7\30\1\0\7\30"+
    "\1\0\53\30\1\0\12\30\2\54\10\0\163\30\10\54"+
    "\1\0\2\54\2\0\12\20\6\0\244\30\14\0\27\30"+
    "\4\0\61\30\4\0\156\30\2\0\152\30\46\0\7\30"+
    "\14\0\5\30\5\0\1\30\1\54\12\30\1\0\15\30"+
    "\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30"+
    "\1\0\154\30\41\0\153\30\22\0\100\30\2\0\66\30"+
    "\50\0\14\30\1\7\3\0\20\54\20\0\20\54\3\0"+
    "\2\30\30\0\3\30\31\0\1\7\6\0\5\30\1\0"+
    "\207\30\7\0\1\7\13\0\12\20\7\0\32\30\4\0"+
    "\1\30\1\0\32\30\13\0\131\30\3\0\6\30\2\0"+
    "\6\30\2\0\6\30\2\0\3\30\3\0\2\7\3\0"+
    "\2\7\31\0\14\30\1\0\32\30\1\0\23\30\1\0"+
    "\2\30\1\0\17\30\2\0\16\30\42\0\173\30\105\0"+
    "\65\30\210\0\1\54\202\0\35\30\3\0\61\30\17\0"+
    "\1\54\37\0\40\30\15\0\36\30\5\0\46\30\5\54"+
    "\5\0\36\30\2\0\44\30\4\0\10\30\1\0\5\30"+
    "\52\0\236\30\2\0\12\20\6\0\44\30\4\0\44\30"+
    "\4\0\50\30\10\0\64\30\234\0\67\30\11\0\26\30"+
    "\12\0\10\30\230\0\6\30\2\0\1\30\1\0\54\30"+
    "\1\0\2\30\3\0\1\30\2\0\27\30\12\0\27\30"+
    "\11\0\37\30\101\0\23\30\1\0\2\30\12\0\26\30"+
    "\12\0\32\30\106\0\70\30\6\0\2\30\100\0\1\30"+
    "\3\54\1\0\2\54\5\0\4\54\4\30\1\0\3\30"+
    "\1\0\33\30\2\54\2\0\3\54\4\0\1\54\40\0"+
    "\35\30\3\0\35\30\43\0\10\30\1\0\34\30\2\54"+
    "\31\0\66\30\12\0\26\30\12\0\23\30\15\0\22\30"+
    "\156\0\111\30\67\0\63\30\15\0\63\30\15\0\50\54"+
    "\10\0\12\20\306\0\35\54\12\0\1\54\10\0\41\54"+
    "\217\0\27\54\11\0\3\54\65\30\17\54\37\0\12\20"+
    "\17\0\4\54\55\30\13\54\25\0\31\30\7\0\12\20"+
    "\6\0\3\54\44\30\16\54\1\0\12\20\4\0\3\54"+
    "\11\0\43\30\1\54\2\0\1\30\11\0\3\54\60\30"+
    "\16\54\4\30\4\0\4\54\3\0\12\20\1\30\1\0"+
    "\1\30\43\0\22\30\1\0\31\30\14\54\6\0\1\54"+
    "\101\0\7\30\1\0\1\30\1\0\4\30\1\0\17\30"+
    "\1\0\12\30\7\0\57\30\14\54\5\0\12\20\6\0"+
    "\4\54\1\0\10\30\2\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\1\0\2\54\1\30"+
    "\7\54\2\0\2\54\2\0\3\54\2\0\1\30\6\0"+
    "\1\54\5\0\5\30\2\54\2\0\7\54\3\0\5\54"+
    "\213\0\65\30\22\54\4\30\5\0\12\20\4\0\2\54"+
    "\40\0\60\30\24\54\2\30\1\0\1\30\10\0\12\20"+
    "\246\0\57\30\7\54\2\0\11\54\27\0\4\30\2\54"+
    "\42\0\60\30\21\54\3\0\1\30\13\0\12\20\46\0"+
    "\53\30\16\54\7\0\12\20\66\0\32\30\1\54\2\0"+
    "\17\54\4\0\12\20\306\0\73\54\145\0\100\30\12\20"+
    "\25\0\1\30\240\0\10\54\2\0\56\54\2\0\10\54"+
    "\1\0\2\54\33\0\1\30\12\54\50\30\7\54\1\30"+
    "\4\54\10\0\1\54\10\0\1\30\13\54\50\30\2\54"+
    "\4\30\20\54\3\0\1\54\42\0\71\30\7\0\11\30"+
    "\1\0\45\30\10\54\1\0\10\54\1\30\17\0\12\20"+
    "\30\0\36\30\2\0\26\54\1\0\16\54\111\0\7\30"+
    "\1\0\2\30\1\0\46\30\6\54\3\0\1\54\1\0"+
    "\2\54\1\0\7\54\1\30\1\54\10\0\12\20\6\0"+
    "\6\54\1\0\2\54\1\0\45\54\1\0\2\54\1\0"+
    "\6\54\7\0\12\20\u0136\0\27\54\11\0\232\30\146\0"+
    "\157\30\21\0\304\30\274\0\57\30\321\0\107\30\271\0"+
    "\71\30\7\0\37\30\1\0\12\20\146\0\36\30\2\0"+
    "\5\54\13\0\60\30\7\54\11\0\4\30\14\0\12\20"+
    "\11\0\25\30\5\0\23\30\260\0\100\54\200\0\105\30"+
    "\6\54\4\0\1\54\1\30\67\54\7\0\4\54\15\30"+
    "\100\0\2\30\1\0\1\54\34\0\355\30\13\54\10\0"+
    "\363\30\15\0\37\30\61\0\3\54\21\0\4\54\10\0"+
    "\u018c\30\4\0\153\30\5\0\15\30\3\0\11\30\7\0"+
    "\12\30\3\0\2\54\306\0\5\54\3\0\6\54\10\0"+
    "\10\54\2\0\7\54\36\0\4\54\224\0\3\54\273\0"+
    "\125\30\1\0\107\30\1\0\2\30\2\0\1\30\2\0"+
    "\2\30\2\0\4\30\1\0\14\30\1\0\1\30\1\0"+
    "\7\30\1\0\101\30\1\0\4\30\2\0\10\30\1\0"+
    "\7\30\1\0\34\30\1\0\4\30\1\0\5\30\1\0"+
    "\1\30\3\0\7\30\1\0\u0154\30\2\0\31\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\37\30\1\0\31\30\1\0\37\30\1\0"+
    "\31\30\1\0\10\30\2\0\62\20\67\54\4\0\62\54"+
    "\10\0\1\54\16\0\1\54\26\0\5\54\1\0\17\54"+
    "\120\0\7\54\1\0\21\54\2\0\7\54\1\0\2\54"+
    "\1\0\5\54\325\0\55\54\3\0\16\54\2\0\12\20"+
    "\4\0\1\54\u0171\0\60\54\12\20\6\0\305\30\13\0"+
    "\7\54\51\0\104\30\10\54\4\0\12\20\246\0\4\30"+
    "\1\0\33\30\1\0\2\30\1\0\1\30\2\0\1\30"+
    "\1\0\12\30\1\0\4\30\1\0\1\30\1\0\1\30"+
    "\6\0\1\30\4\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\3\30\1\0\2\30\1\0\1\30\2\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\2\30\1\0\1\30\2\0\4\30\1\0\7\30"+
    "\1\0\4\30\1\0\4\30\1\0\1\30\1\0\12\30"+
    "\1\0\21\30\5\0\3\30\1\0\5\30\1\0\21\30"+
    "\164\0\32\54\6\0\32\54\6\0\32\54\166\0\327\30"+
    "\51\0\65\30\13\0\336\30\2\0\u0182\30\16\0\u0131\30"+
    "\37\0\36\30\342\0\360\54\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\1\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\12\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\0\1\27\1\30\1\31\1\4\1\32"+
    "\5\4\1\33\1\34\1\4\1\35\3\4\1\36\1\37"+
    "\1\40\1\41\1\14\1\42\1\4\1\43\1\4\1\44"+
    "\5\4\1\45\1\4\1\46\1\4\1\47\2\4\1\50"+
    "\2\4\1\51\1\52\3\4\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\132\0\264\0\341\0\132"+
    "\0\u010e\0\u013b\0\132\0\132\0\132\0\132\0\132\0\132"+
    "\0\132\0\u0168\0\u0195\0\132\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\132\0\132\0\u040b\0\132\0\u0438\0\132\0\u0465"+
    "\0\u0492\0\132\0\132\0\132\0\u04bf\0\u013b\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u013b\0\u013b\0\u05cd\0\u013b\0\u05fa"+
    "\0\u0627\0\u0654\0\132\0\132\0\132\0\132\0\u0465\0\u013b"+
    "\0\u0681\0\u013b\0\u06ae\0\u013b\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u013b\0\u07bc\0\u013b\0\u07e9\0\u013b\0\u0816\0\u0843"+
    "\0\u013b\0\u0870\0\u089d\0\u013b\0\u013b\0\u08ca\0\u08f7\0\u0924"+
    "\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\3\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\2\12\1\32\1\33\1\12\1\34\3\12\1\35\1\36"+
    "\1\12\1\37\1\40\1\41\1\12\1\3\1\12\1\42"+
    "\1\43\1\3\2\44\2\3\1\44\1\45\42\44\1\46"+
    "\4\44\56\0\1\4\55\0\1\5\76\0\1\47\30\0"+
    "\2\11\1\5\52\11\20\0\2\12\4\0\22\12\1\0"+
    "\1\12\2\0\1\12\16\0\1\50\54\0\1\50\1\0"+
    "\2\23\27\0\1\51\27\0\1\52\54\0\1\53\54\0"+
    "\1\54\50\0\2\12\4\0\12\12\1\55\7\12\1\0"+
    "\1\12\2\0\1\12\20\0\2\12\4\0\21\12\1\56"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\10\12"+
    "\1\57\1\12\1\60\7\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\1\61\12\12\1\62\1\63\5\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\5\12"+
    "\1\64\14\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\14\12\1\65\5\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\4\12\1\66\15\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\13\12\1\67\1\70"+
    "\5\12\1\0\1\12\2\0\1\12\20\0\2\12\4\0"+
    "\12\12\1\71\7\12\1\0\1\12\2\0\1\12\20\0"+
    "\2\12\4\0\6\12\1\72\13\12\1\0\1\12\2\0"+
    "\1\12\2\44\2\0\1\44\1\0\42\44\1\0\4\44"+
    "\5\0\1\73\32\0\1\74\1\0\1\75\1\0\1\76"+
    "\30\0\2\77\27\0\1\50\23\0\2\23\27\0\1\51"+
    "\23\0\2\12\4\0\3\12\1\100\16\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\15\12\1\101\4\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\3\12"+
    "\1\102\16\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\10\12\1\103\11\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\14\12\1\104\5\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\13\12\1\105\6\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\16\12"+
    "\1\106\3\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\17\12\1\107\2\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\3\12\1\110\16\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\7\12\1\111\12\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\4\12"+
    "\1\112\15\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\15\12\1\113\4\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\11\12\1\114\10\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\17\12\1\115\2\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\4\12"+
    "\1\116\15\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\4\12\1\117\15\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\10\12\1\120\11\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\4\12\1\121\15\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\14\12"+
    "\1\122\5\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\5\12\1\123\14\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\4\12\1\124\15\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\12\12\1\125\7\12"+
    "\1\0\1\12\2\0\1\12\20\0\2\12\4\0\7\12"+
    "\1\126\12\12\1\0\1\12\2\0\1\12\20\0\2\12"+
    "\4\0\12\12\1\127\7\12\1\0\1\12\2\0\1\12"+
    "\20\0\2\12\4\0\4\12\1\130\15\12\1\0\1\12"+
    "\2\0\1\12\20\0\2\12\4\0\3\12\1\131\16\12"+
    "\1\0\1\12\2\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2385];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\2\1\7\11"+
    "\2\1\1\11\15\1\2\11\1\1\1\11\1\1\1\11"+
    "\2\0\3\11\16\1\4\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(Symbols.EOF);
            }  // fall though
            case 90: break;
            default:
          { 	new Symbol(Symbols.EOF);
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new IllegalSymbol(yyline, yycolumn, yytext());
            }
            // fall through
          case 44: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 45: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 46: break;
          case 4:
            { return symbol(Symbols.IDENTIFIER, new String(yytext()));
            }
            // fall through
          case 47: break;
          case 5:
            { return symbol(Symbols.ROUND_OPEN);
            }
            // fall through
          case 48: break;
          case 6:
            { return symbol(Symbols.ROUND_CLOSED);
            }
            // fall through
          case 49: break;
          case 7:
            { return symbol(Symbols.ASTERISK);
            }
            // fall through
          case 50: break;
          case 8:
            { return symbol(Symbols.PLUS);
            }
            // fall through
          case 51: break;
          case 9:
            { return symbol(Symbols.COMMA);
            }
            // fall through
          case 52: break;
          case 10:
            { return symbol(Symbols.MINUS);
            }
            // fall through
          case 53: break;
          case 11:
            { return symbol(Symbols.SLASH);
            }
            // fall through
          case 54: break;
          case 12:
            { return symbol(Symbols.DECIMAL, new BigDecimal(new String(yytext()).replace("_", "")));
            }
            // fall through
          case 55: break;
          case 13:
            { return symbol(Symbols.COLON);
            }
            // fall through
          case 56: break;
          case 14:
            { return symbol(Symbols.LESS);
            }
            // fall through
          case 57: break;
          case 15:
            { return symbol(Symbols.ASSIGN);
            }
            // fall through
          case 58: break;
          case 16:
            { return symbol(Symbols.GREATER);
            }
            // fall through
          case 59: break;
          case 17:
            { return symbol(Symbols.CURLY_OPEN);
            }
            // fall through
          case 60: break;
          case 18:
            { return symbol(Symbols.CURLY_CLOSED);
            }
            // fall through
          case 61: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 62: break;
          case 20:
            { yybegin(YYINITIAL);
                          return symbol(Symbols.STRING, string.toString());
            }
            // fall through
          case 63: break;
          case 21:
            { string.append('\\');
            }
            // fall through
          case 64: break;
          case 22:
            { return symbol(Symbols.NOT_EQUAL);
            }
            // fall through
          case 65: break;
          case 23:
            { return symbol(Symbols.LESS_EQUAL);
            }
            // fall through
          case 66: break;
          case 24:
            { return symbol(Symbols.EQUAL);
            }
            // fall through
          case 67: break;
          case 25:
            { return symbol(Symbols.GREATER_EQUAL);
            }
            // fall through
          case 68: break;
          case 26:
            { return symbol(Symbols.BY);
            }
            // fall through
          case 69: break;
          case 27:
            { return symbol(Symbols.IF);
            }
            // fall through
          case 70: break;
          case 28:
            { return symbol(Symbols.OR);
            }
            // fall through
          case 71: break;
          case 29:
            { return symbol(Symbols.TO);
            }
            // fall through
          case 72: break;
          case 30:
            { string.append('\"');
            }
            // fall through
          case 73: break;
          case 31:
            { string.append('\n');
            }
            // fall through
          case 74: break;
          case 32:
            { string.append('\r');
            }
            // fall through
          case 75: break;
          case 33:
            { string.append('\t');
            }
            // fall through
          case 76: break;
          case 34:
            { return symbol(Symbols.AND);
            }
            // fall through
          case 77: break;
          case 35:
            { return symbol(Symbols.END);
            }
            // fall through
          case 78: break;
          case 36:
            { return symbol(Symbols.FOR);
            }
            // fall through
          case 79: break;
          case 37:
            { return symbol(Symbols.ELSE);
            }
            // fall through
          case 80: break;
          case 38:
            { return symbol(Symbols.FROM);
            }
            // fall through
          case 81: break;
          case 39:
            { return symbol(Symbols.TRUE);
            }
            // fall through
          case 82: break;
          case 40:
            { return symbol(Symbols.FALSE);
            }
            // fall through
          case 83: break;
          case 41:
            { return symbol(Symbols.WHILE);
            }
            // fall through
          case 84: break;
          case 42:
            { return symbol(Symbols.RETURN);
            }
            // fall through
          case 85: break;
          case 43:
            { return symbol(Symbols.UNDEFINED);
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
