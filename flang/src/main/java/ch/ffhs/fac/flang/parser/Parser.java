
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ch.ffhs.fac.flang.parser;

import java_cup.runtime.Symbol;
import ch.ffhs.fac.flang.parser.interfaces.*;
import ch.ffhs.fac.flang.parser.exceptions.*;
import ch.ffhs.fac.flang.runtime.*;
import ch.ffhs.fac.flang.runtime.expressions.*;
import ch.ffhs.fac.flang.runtime.instructions.*;
import java.util.*;
import java.math.BigDecimal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\014\006\000\002\014\005\000\002" +
    "\007\005\000\002\007\006\000\002\011\006\000\002\011" +
    "\006\000\002\004\007\000\002\004\013\000\002\006\007" +
    "\000\002\005\011\000\002\005\013\000\002\005\013\000" +
    "\002\005\015\000\002\015\005\000\002\015\003\000\002" +
    "\015\002\000\002\016\003\000\002\016\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\021\004\000\002\020\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\013\010\000\002\013\011\000\002\012\005" +
    "\000\002\012\003\000\002\010\006\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\020\002\uffff\011\uffff\015\uffff\016\uffff\020" +
    "\uffff\021\uffff\046\uffff\001\002\000\020\002\013\011\011" +
    "\015\007\016\014\020\023\021\022\046\021\001\002\000" +
    "\022\002\ufffb\011\ufffb\015\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\025\ufffb\046\ufffb\001\002\000\022\002\000\011\000\015" +
    "\000\016\000\020\000\021\000\025\000\046\000\001\002" +
    "\000\026\004\032\005\041\006\044\022\025\026\037\031" +
    "\033\034\040\046\021\047\035\050\030\001\002\000\022" +
    "\002\ufffe\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe\025" +
    "\ufffe\046\ufffe\001\002\000\004\046\021\001\002\000\022" +
    "\002\ufffa\011\ufffa\015\ufffa\016\ufffa\020\ufffa\021\ufffa\025" +
    "\ufffa\046\ufffa\001\002\000\004\002\001\001\002\000\026" +
    "\004\032\005\041\006\044\022\025\026\037\031\033\034" +
    "\040\046\021\047\035\050\030\001\002\000\004\022\147" +
    "\001\002\000\022\002\ufff9\011\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\025\ufff9\046\ufff9\001\002\000\010\022\140" +
    "\026\123\030\141\001\002\000\022\002\ufff8\011\ufff8\015" +
    "\ufff8\016\ufff8\020\ufff8\021\ufff8\025\ufff8\046\ufff8\001\002" +
    "\000\076\002\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\001\002\000" +
    "\026\004\032\005\041\006\044\022\025\026\037\031\033" +
    "\034\040\046\021\047\035\050\030\001\002\000\022\002" +
    "\ufffd\011\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\025\ufffd" +
    "\046\ufffd\001\002\000\066\002\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\046\uffe2\001\002\000\026\004\032\005" +
    "\041\006\044\022\025\026\037\031\033\034\040\046\021" +
    "\047\035\050\030\001\002\000\066\002\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\046\uffcd\001\002\000\072\002" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\125\023\uffe3\024\uffe3\025" +
    "\uffe3\026\123\027\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044" +
    "\uffe3\046\uffe3\001\002\000\066\002\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\046\uffd1\001\002\000\066\002\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002" +
    "\000\066\002\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\046\uffd0\001\002\000\004\022\106\001\002\000\066\002" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\027" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\046\uffe7\001" +
    "\002\000\066\002\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\027\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\046\uffcc\001\002\000\052\002\ufffc\007\054\010\066" +
    "\011\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\025\ufffc\033" +
    "\060\034\053\035\061\036\055\037\057\040\063\041\064" +
    "\042\062\043\056\044\065\046\ufffc\001\002\000\032\004" +
    "\032\005\041\006\044\022\025\026\037\027\uffe8\031\033" +
    "\032\uffe8\034\040\046\021\047\035\050\030\001\002\000" +
    "\026\004\032\005\041\006\044\022\025\026\037\031\033" +
    "\034\040\046\021\047\035\050\030\001\002\000\066\002" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\027" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\001" +
    "\002\000\066\002\uffe4\007\uffe4\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\027\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\046\uffe4\001\002\000\070\002\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\022\045\023\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\001\002\000\066" +
    "\002\uffce\007\uffce\010\uffce\011\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\020\uffce\021\uffce\023\uffce\024\uffce\025\uffce" +
    "\027\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce" +
    "\001\002\000\032\004\032\005\041\006\044\022\025\023" +
    "\uffe8\026\037\031\033\032\uffe8\034\040\046\021\047\035" +
    "\050\030\001\002\000\040\007\054\010\066\023\uffe9\027" +
    "\uffe9\032\uffe9\033\060\034\053\035\061\036\055\037\057" +
    "\040\063\041\064\042\062\043\056\044\065\001\002\000" +
    "\006\023\051\032\050\001\002\000\026\004\032\005\041" +
    "\006\044\022\025\026\037\031\033\034\040\046\021\047" +
    "\035\050\030\001\002\000\070\002\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\001\002\000\040" +
    "\007\054\010\066\023\uffea\027\uffea\032\uffea\033\060\034" +
    "\053\035\061\036\055\037\057\040\063\041\064\042\062" +
    "\043\056\044\065\001\002\000\026\004\032\005\041\006" +
    "\044\022\025\026\037\031\033\034\040\046\021\047\035" +
    "\050\030\001\002\000\026\004\032\005\041\006\044\022" +
    "\025\026\037\031\033\034\040\046\021\047\035\050\030" +
    "\001\002\000\026\004\032\005\041\006\044\022\025\026" +
    "\037\031\033\034\040\046\021\047\035\050\030\001\002" +
    "\000\026\004\032\005\041\006\044\022\025\026\037\031" +
    "\033\034\040\046\021\047\035\050\030\001\002\000\026" +
    "\004\032\005\041\006\044\022\025\026\037\031\033\034" +
    "\040\046\021\047\035\050\030\001\002\000\026\004\032" +
    "\005\041\006\044\022\025\026\037\031\033\034\040\046" +
    "\021\047\035\050\030\001\002\000\026\004\032\005\041" +
    "\006\044\022\025\026\037\031\033\034\040\046\021\047" +
    "\035\050\030\001\002\000\026\004\032\005\041\006\044" +
    "\022\025\026\037\031\033\034\040\046\021\047\035\050" +
    "\030\001\002\000\026\004\032\005\041\006\044\022\025" +
    "\026\037\031\033\034\040\046\021\047\035\050\030\001" +
    "\002\000\026\004\032\005\041\006\044\022\025\026\037" +
    "\031\033\034\040\046\021\047\035\050\030\001\002\000" +
    "\026\004\032\005\041\006\044\022\025\026\037\031\033" +
    "\034\040\046\021\047\035\050\030\001\002\000\026\004" +
    "\032\005\041\006\044\022\025\026\037\031\033\034\040" +
    "\046\021\047\035\050\030\001\002\000\066\002\uffde\007" +
    "\054\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\027\uffde\032" +
    "\uffde\033\060\034\053\035\061\036\055\037\057\040\063" +
    "\041\064\042\062\043\056\044\065\046\uffde\001\002\000" +
    "\066\002\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\027\uffd7\032\uffd7\033\060\034\053\035\061\036\055" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046" +
    "\uffd7\001\002\000\066\002\uffda\007\uffda\010\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033\060\034\053" +
    "\035\061\036\055\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\046\uffda\001\002\000\066\002\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020" +
    "\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb" +
    "\033\060\034\053\035\061\036\055\037\uffdb\040\uffdb\041" +
    "\064\042\062\043\056\044\065\046\uffdb\001\002\000\066" +
    "\002\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\027\uffd9\032\uffd9\033\060\034\053\035\061\036\055\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9" +
    "\001\002\000\066\002\uffd4\007\uffd4\010\uffd4\011\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\046\uffd4\001\002\000\066\002\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\061\036\055\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\046\uffd6\001\002\000\066\002" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\032\uffdc\033\060\034\053\035\061\036\055\037\uffdc" +
    "\040\uffdc\041\064\042\062\043\056\044\065\046\uffdc\001" +
    "\002\000\066\002\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\027\uffd8\032\uffd8\033\060\034\053\035\061" +
    "\036\055\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\046\uffd8\001\002\000\066\002\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\046\uffd3\001\002\000\066\002\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd" +
    "\032\uffdd\033\060\034\053\035\061\036\055\037\057\040" +
    "\063\041\064\042\062\043\056\044\065\046\uffdd\001\002" +
    "\000\066\002\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\035\061\036" +
    "\055\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\046\uffd5\001\002\000\066\002\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\027\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\046\uffd2\001\002\000\006\027\105\032" +
    "\050\001\002\000\066\002\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\046\uffdf\001\002\000\006\023\107\046\021" +
    "\001\002\000\004\024\120\001\002\000\006\023\uffc7\032" +
    "\uffc7\001\002\000\006\023\113\032\112\001\002\000\004" +
    "\046\021\001\002\000\004\024\114\001\002\000\020\011" +
    "\uffff\015\uffff\016\uffff\020\uffff\021\uffff\025\uffff\046\uffff" +
    "\001\002\000\020\011\011\015\007\016\014\020\023\021" +
    "\022\025\116\046\021\001\002\000\066\002\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\001\002\000\006" +
    "\023\uffc8\032\uffc8\001\002\000\020\011\uffff\015\uffff\016" +
    "\uffff\020\uffff\021\uffff\025\uffff\046\uffff\001\002\000\020" +
    "\011\011\015\007\016\014\020\023\021\022\025\122\046" +
    "\021\001\002\000\066\002\uffca\007\uffca\010\uffca\011\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\023" +
    "\uffca\024\uffca\025\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\046\uffca\001\002\000\026\004\032\005\041" +
    "\006\044\022\025\026\037\031\033\034\040\046\021\047" +
    "\035\050\030\001\002\000\070\002\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\130\027\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\001\002\000\032" +
    "\004\032\005\041\006\044\022\025\023\uffe8\026\037\031" +
    "\033\032\uffe8\034\040\046\021\047\035\050\030\001\002" +
    "\000\006\023\127\032\050\001\002\000\070\002\uffc6\007" +
    "\uffc6\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\001" +
    "\002\000\026\004\032\005\041\006\044\022\025\026\037" +
    "\031\033\034\040\046\021\047\035\050\030\001\002\000" +
    "\034\007\054\010\066\027\132\033\060\034\053\035\061" +
    "\036\055\037\057\040\063\041\064\042\062\043\056\044" +
    "\065\001\002\000\072\002\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\020\ufff7\021\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\001\002\000\034" +
    "\007\054\010\066\027\134\033\060\034\053\035\061\036" +
    "\055\037\057\040\063\041\064\042\062\043\056\044\065" +
    "\001\002\000\072\002\ufff6\007\ufff6\010\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\046\ufff6\001\002\000\034\007" +
    "\054\010\066\023\136\033\060\034\053\035\061\036\055" +
    "\037\057\040\063\041\064\042\062\043\056\044\065\001" +
    "\002\000\066\002\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\001\002\000\006\026\130\030\145\001\002" +
    "\000\032\004\032\005\041\006\044\022\025\023\uffe8\026" +
    "\037\031\033\032\uffe8\034\040\046\021\047\035\050\030" +
    "\001\002\000\026\004\032\005\041\006\044\022\025\026" +
    "\037\031\033\034\040\046\021\047\035\050\030\001\002" +
    "\000\052\002\ufff5\007\054\010\066\011\ufff5\015\ufff5\016" +
    "\ufff5\020\ufff5\021\ufff5\025\ufff5\033\060\034\053\035\061" +
    "\036\055\037\057\040\063\041\064\042\062\043\056\044" +
    "\065\046\ufff5\001\002\000\006\023\144\032\050\001\002" +
    "\000\024\002\ufff3\011\ufff3\015\ufff3\016\ufff3\020\ufff3\021" +
    "\ufff3\022\uffc6\025\ufff3\046\ufff3\001\002\000\026\004\032" +
    "\005\041\006\044\022\025\026\037\031\033\034\040\046" +
    "\021\047\035\050\030\001\002\000\052\002\ufff4\007\054" +
    "\010\066\011\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\025" +
    "\ufff4\033\060\034\053\035\061\036\055\037\057\040\063" +
    "\041\064\042\062\043\056\044\065\046\ufff4\001\002\000" +
    "\032\004\032\005\041\006\044\022\025\023\uffe8\026\037" +
    "\031\033\032\uffe8\034\040\046\021\047\035\050\030\001" +
    "\002\000\006\023\151\032\050\001\002\000\024\002\ufff2" +
    "\011\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2\022\uffc5\025" +
    "\ufff2\046\ufff2\001\002\000\034\007\054\010\066\024\153" +
    "\033\060\034\053\035\061\036\055\037\057\040\063\041" +
    "\064\042\062\043\056\044\065\001\002\000\020\011\uffff" +
    "\015\uffff\016\uffff\020\uffff\021\uffff\025\uffff\046\uffff\001" +
    "\002\000\020\011\011\015\007\016\014\020\023\021\022" +
    "\025\155\046\021\001\002\000\024\002\ufff1\011\ufff1\015" +
    "\ufff1\016\ufff1\017\156\020\ufff1\021\ufff1\025\ufff1\046\ufff1" +
    "\001\002\000\004\024\157\001\002\000\020\011\uffff\015" +
    "\uffff\016\uffff\020\uffff\021\uffff\025\uffff\046\uffff\001\002" +
    "\000\020\011\011\015\007\016\014\020\023\021\022\025" +
    "\161\046\021\001\002\000\022\002\ufff0\011\ufff0\015\ufff0" +
    "\016\ufff0\020\ufff0\021\ufff0\025\ufff0\046\ufff0\001\002\000" +
    "\006\012\164\013\163\001\002\000\026\004\032\005\041" +
    "\006\044\022\025\026\037\031\033\034\040\046\021\047" +
    "\035\050\030\001\002\000\026\004\032\005\041\006\044" +
    "\022\025\026\037\031\033\034\040\046\021\047\035\050" +
    "\030\001\002\000\034\007\054\010\066\013\166\033\060" +
    "\034\053\035\061\036\055\037\057\040\063\041\064\042" +
    "\062\043\056\044\065\001\002\000\026\004\032\005\041" +
    "\006\044\022\025\026\037\031\033\034\040\046\021\047" +
    "\035\050\030\001\002\000\036\007\054\010\066\014\170" +
    "\024\171\033\060\034\053\035\061\036\055\037\057\040" +
    "\063\041\064\042\062\043\056\044\065\001\002\000\026" +
    "\004\032\005\041\006\044\022\025\026\037\031\033\034" +
    "\040\046\021\047\035\050\030\001\002\000\020\011\uffff" +
    "\015\uffff\016\uffff\020\uffff\021\uffff\025\uffff\046\uffff\001" +
    "\002\000\020\011\011\015\007\016\014\020\023\021\022" +
    "\025\173\046\021\001\002\000\022\002\uffec\011\uffec\015" +
    "\uffec\016\uffec\020\uffec\021\uffec\025\uffec\046\uffec\001\002" +
    "\000\034\007\054\010\066\024\175\033\060\034\053\035" +
    "\061\036\055\037\057\040\063\041\064\042\062\043\056" +
    "\044\065\001\002\000\020\011\uffff\015\uffff\016\uffff\020" +
    "\uffff\021\uffff\025\uffff\046\uffff\001\002\000\020\011\011" +
    "\015\007\016\014\020\023\021\022\025\177\046\021\001" +
    "\002\000\022\002\uffeb\011\uffeb\015\uffeb\016\uffeb\020\uffeb" +
    "\021\uffeb\025\uffeb\046\uffeb\001\002\000\036\007\054\010" +
    "\066\014\201\024\202\033\060\034\053\035\061\036\055" +
    "\037\057\040\063\041\064\042\062\043\056\044\065\001" +
    "\002\000\026\004\032\005\041\006\044\022\025\026\037" +
    "\031\033\034\040\046\021\047\035\050\030\001\002\000" +
    "\020\011\uffff\015\uffff\016\uffff\020\uffff\021\uffff\025\uffff" +
    "\046\uffff\001\002\000\020\011\011\015\007\016\014\020" +
    "\023\021\022\025\204\046\021\001\002\000\022\002\uffee" +
    "\011\uffee\015\uffee\016\uffee\020\uffee\021\uffee\025\uffee\046" +
    "\uffee\001\002\000\034\007\054\010\066\024\206\033\060" +
    "\034\053\035\061\036\055\037\057\040\063\041\064\042" +
    "\062\043\056\044\065\001\002\000\020\011\uffff\015\uffff" +
    "\016\uffff\020\uffff\021\uffff\025\uffff\046\uffff\001\002\000" +
    "\020\011\011\015\007\016\014\020\023\021\022\025\210" +
    "\046\021\001\002\000\022\002\uffed\011\uffed\015\uffed\016" +
    "\uffed\020\uffed\021\uffed\025\uffed\046\uffed\001\002\000\034" +
    "\007\054\010\066\024\212\033\060\034\053\035\061\036" +
    "\055\037\057\040\063\041\064\042\062\043\056\044\065" +
    "\001\002\000\020\011\uffff\015\uffff\016\uffff\020\uffff\021" +
    "\uffff\025\uffff\046\uffff\001\002\000\020\011\011\015\007" +
    "\016\014\020\023\021\022\025\214\046\021\001\002\000" +
    "\022\002\uffef\011\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\025\uffef\046\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\004\002\003\001\001\000\022\003\005\004" +
    "\004\005\015\006\011\007\007\010\014\011\017\023\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\042\013\025\016\210\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\002\001\001\000\004\023\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\042" +
    "\013\025\016\151\017\033\020\023\021\030\022\041\023" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\042\013\025\016\035\017\033\020\023\021\030" +
    "\022\041\023\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\010\042\013\025\016\134\017\033\020\023" +
    "\021\030\022\041\023\026\001\001\000\002\001\001\000" +
    "\004\014\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\010\042\013\025" +
    "\015\103\016\045\017\033\020\023\021\030\022\041\023" +
    "\026\001\001\000\022\010\042\013\025\016\102\017\033" +
    "\020\023\021\030\022\041\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\042\013\025\015\046\016\045\017\033\020" +
    "\023\021\030\022\041\023\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\042\013\025\016\051\017" +
    "\033\020\023\021\030\022\041\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\042\013\025\016" +
    "\101\017\033\020\023\021\030\022\041\023\026\001\001" +
    "\000\022\010\042\013\025\016\100\017\033\020\023\021" +
    "\030\022\041\023\026\001\001\000\022\010\042\013\025" +
    "\016\077\017\033\020\023\021\030\022\041\023\026\001" +
    "\001\000\022\010\042\013\025\016\076\017\033\020\023" +
    "\021\030\022\041\023\026\001\001\000\022\010\042\013" +
    "\025\016\075\017\033\020\023\021\030\022\041\023\026" +
    "\001\001\000\022\010\042\013\025\016\074\017\033\020" +
    "\023\021\030\022\041\023\026\001\001\000\022\010\042" +
    "\013\025\016\073\017\033\020\023\021\030\022\041\023" +
    "\026\001\001\000\022\010\042\013\025\016\072\017\033" +
    "\020\023\021\030\022\041\023\026\001\001\000\022\010" +
    "\042\013\025\016\071\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\022\010\042\013\025\016\070\017" +
    "\033\020\023\021\030\022\041\023\026\001\001\000\022" +
    "\010\042\013\025\016\067\017\033\020\023\021\030\022" +
    "\041\023\026\001\001\000\022\010\042\013\025\016\066" +
    "\017\033\020\023\021\030\022\041\023\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\110\023\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\116\001\001\000\002\001\001\000\004" +
    "\002\114\001\001\000\022\003\005\004\004\005\015\006" +
    "\011\007\007\010\014\011\017\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\120\001\001\000" +
    "\022\003\005\004\004\005\015\006\011\007\007\010\014" +
    "\011\017\023\016\001\001\000\002\001\001\000\022\010" +
    "\042\013\025\016\132\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\002\001\001\000\024\010\042\013" +
    "\025\015\125\016\045\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\010\042\013\025\016\130\017\033\020\023\021\030" +
    "\022\041\023\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\042\013" +
    "\025\015\142\016\045\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\022\010\042\013\025\016\141\017" +
    "\033\020\023\021\030\022\041\023\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\010" +
    "\042\013\025\016\145\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\002\001\001\000\024\010\042\013" +
    "\025\015\147\016\045\017\033\020\023\021\030\022\041" +
    "\023\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\153\001\001\000\022\003\005" +
    "\004\004\005\015\006\011\007\007\010\014\011\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\157\001\001\000\022\003\005\004\004\005\015\006" +
    "\011\007\007\010\014\011\017\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\042\013\025\016" +
    "\177\017\033\020\023\021\030\022\041\023\026\001\001" +
    "\000\022\010\042\013\025\016\164\017\033\020\023\021" +
    "\030\022\041\023\026\001\001\000\002\001\001\000\022" +
    "\010\042\013\025\016\166\017\033\020\023\021\030\022" +
    "\041\023\026\001\001\000\002\001\001\000\022\010\042" +
    "\013\025\016\173\017\033\020\023\021\030\022\041\023" +
    "\026\001\001\000\004\002\171\001\001\000\022\003\005" +
    "\004\004\005\015\006\011\007\007\010\014\011\017\023" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\175\001\001\000\022\003\005\004\004\005\015\006" +
    "\011\007\007\010\014\011\017\023\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\010\042\013\025\016" +
    "\204\017\033\020\023\021\030\022\041\023\026\001\001" +
    "\000\004\002\202\001\001\000\022\003\005\004\004\005" +
    "\015\006\011\007\007\010\014\011\017\023\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\206\001" +
    "\001\000\022\003\005\004\004\005\015\006\011\007\007" +
    "\010\014\011\017\023\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\212\001\001\000\022\003\005" +
    "\004\004\005\015\006\011\007\007\010\014\011\017\023" +
    "\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@SuppressWarnings("unchecked")
	public List<Instruction> parseInstructions() throws java.lang.Exception {
		final var symbol = parse();
		return (List<Instruction>) symbol.value;
	}
	
	public Document parseDocument() throws java.lang.Exception {
		return new Document(parseInstructions());
	}
	
	private void setLoc(final LocatedInText o, final int line, final int col) {
		o.setLocation(new Location(line + 1, col));
	}
	
	@Override
	public void syntax_error(Symbol cur_token)
	{
		List<Integer> ids = expected_token_ids();
		LinkedList<String> list = new LinkedList<String>();
		for (Integer expected : ids){
			list.add(symbl_name_from_id(expected));
		}
		
		throw new ParserException(list, new Location(cur_token.left + 1, cur_token.right));
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> start_val = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> l = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= assignment 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= END 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(); parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= RETURN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(i); parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= if 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= while 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= for 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= functionProcedure 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // indexes ::= indexes SQUARE_OPEN expression SQUARE_CLOSED 
            {
              LinkedList<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Expression> i = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; i.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // indexes ::= SQUARE_OPEN expression SQUARE_CLOSED 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexes",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // assignment ::= identifier ASSIGN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assignment ::= identifier indexes ASSIGN expression 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier s = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> i = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IndexAssignment(s, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionProcedure ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureCall(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionProcedure",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionProcedure ::= functionCall ROUND_OPEN expressions ROUND_CLOSED 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ProcedureCall(c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionProcedure",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED ELSE CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> o = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // while ::= WHILE expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR identifier TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= FOR identifier TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for ::= FOR identifier FROM expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for ::= FOR identifier FROM expression TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= expressions COMMA expression 
            {
              LinkedList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expressions ::= expression 
            {
              LinkedList<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressions ::= 
            {
              LinkedList<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= operation 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= ROUND_OPEN expression ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= functionCall 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= literal 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= arrayBuilder 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= access 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; parser.setLoc(RESULT, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // access ::= identifier indexes 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier s = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expression> i = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Access(s, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arrayBuilder ::= SQUARE_OPEN expressions SQUARE_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> i = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ArrayBuilder(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayBuilder",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operation ::= expression OR expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operation ::= expression AND expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operation ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operation ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.NOT_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= expression LESS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.LESS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.LESS_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.GREATER, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.GREATER_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operation ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operation ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operation ::= expression ASTERISK expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.ASTERISK, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operation ::= expression SLASH expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperation(l, BinaryOperation.Type.SLASH, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operation ::= MINUS expression 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperation(i, UnaryOperation.Type.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // literal ::= DECIMAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BigDecimal i = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Decimal(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= UNDEFINED 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Undefined.UNDEFINED; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= functionDeclaration 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= STRING 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.String(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Identifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // functionDeclaration ::= COLON ROUND_OPEN ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Function(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // functionDeclaration ::= COLON ROUND_OPEN functionArguments ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Literal RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Identifier> a = (LinkedList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Function(a, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // functionArguments ::= functionArguments COMMA identifier 
            {
              LinkedList<Identifier> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Identifier> l = (LinkedList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;  l.add(i); parser.setLoc(i, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // functionArguments ::= identifier 
            {
              LinkedList<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Identifier>(); RESULT.add(i); parser.setLoc(i, ileft, iright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // functionCall ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functionCall ::= functionCall ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
