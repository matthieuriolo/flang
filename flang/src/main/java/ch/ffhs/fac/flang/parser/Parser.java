
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ch.ffhs.fac.flang.parser;

import ch.ffhs.fac.flang.runtime.*;
import ch.ffhs.fac.flang.runtime.operations.*;
import ch.ffhs.fac.flang.runtime.instructions.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\010\005\000\002" +
    "\011\006\000\002\011\006\000\002\005\007\000\002\005" +
    "\013\000\002\007\007\000\002\006\011\000\002\006\013" +
    "\000\002\006\013\000\002\006\015\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\004\000\002\015\005\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\005\000\002\017\003\000\002\013\011\000" +
    "\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\016\011\010\015\006\016\014\020\022\021" +
    "\021\046\020\001\002\000\022\002\ufffa\011\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\021\ufffa\025\ufffa\046\ufffa\001\002\000" +
    "\022\002\ufffe\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe" +
    "\025\ufffe\046\ufffe\001\002\000\026\004\026\005\033\006" +
    "\032\022\037\026\031\031\025\034\023\046\020\047\030" +
    "\050\024\001\002\000\022\002\ufffd\011\ufffd\015\ufffd\016" +
    "\ufffd\020\ufffd\021\ufffd\025\ufffd\046\ufffd\001\002\000\004" +
    "\046\020\001\002\000\022\002\ufff9\011\ufff9\015\ufff9\016" +
    "\ufff9\020\ufff9\021\ufff9\025\ufff9\046\ufff9\001\002\000\020" +
    "\002\000\011\010\015\006\016\014\020\022\021\021\046" +
    "\020\001\002\000\024\002\ufff7\011\ufff7\015\ufff7\016\ufff7" +
    "\020\ufff7\021\ufff7\022\130\025\ufff7\046\ufff7\001\002\000" +
    "\026\004\026\005\033\006\032\022\037\026\031\031\025" +
    "\034\023\046\020\047\030\050\024\001\002\000\022\002" +
    "\ufff8\011\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\025\ufff8" +
    "\046\ufff8\001\002\000\006\022\113\030\114\001\002\000" +
    "\004\002\112\001\002\000\074\002\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3" +
    "\001\002\000\026\004\026\005\033\006\032\022\037\026" +
    "\031\031\025\034\023\046\020\047\030\050\024\001\002" +
    "\000\022\002\ufffc\011\ufffc\015\ufffc\016\ufffc\020\ufffc\021" +
    "\ufffc\025\ufffc\046\ufffc\001\002\000\026\004\026\005\033" +
    "\006\032\022\037\026\031\031\025\034\023\046\020\047" +
    "\030\050\024\001\002\000\066\002\uffda\007\uffda\010\uffda" +
    "\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021" +
    "\uffda\023\uffda\024\uffda\025\uffda\027\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\043\uffda\044\uffda\046\uffda\001\002\000\004\022\077" +
    "\001\002\000\066\002\uffd9\007\uffd9\010\uffd9\011\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\046\uffd9\001\002\000\066\002\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\046\uffd6\001\002\000\066\002" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\027" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\001" +
    "\002\000\026\004\026\005\033\006\032\022\037\026\031" +
    "\031\025\034\023\046\020\047\030\050\024\001\002\000" +
    "\066\002\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\027\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046" +
    "\uffd7\001\002\000\066\002\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\046\uffd8\001\002\000\066\002\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020" +
    "\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\001\002\000\052" +
    "\002\ufffb\007\042\010\055\011\ufffb\015\ufffb\016\ufffb\020" +
    "\ufffb\021\ufffb\025\ufffb\033\047\034\041\035\050\036\043" +
    "\037\046\040\052\041\053\042\051\043\045\044\054\046" +
    "\ufffb\001\002\000\066\002\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\027\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\046\uffdc\001\002\000\026\004\026\005\033" +
    "\006\032\022\037\026\031\031\025\034\023\046\020\047" +
    "\030\050\024\001\002\000\034\007\042\010\055\023\044" +
    "\033\047\034\041\035\050\036\043\037\046\040\052\041" +
    "\053\042\051\043\045\044\054\001\002\000\026\004\026" +
    "\005\033\006\032\022\037\026\031\031\025\034\023\046" +
    "\020\047\030\050\024\001\002\000\026\004\026\005\033" +
    "\006\032\022\037\026\031\031\025\034\023\046\020\047" +
    "\030\050\024\001\002\000\026\004\026\005\033\006\032" +
    "\022\037\026\031\031\025\034\023\046\020\047\030\050" +
    "\024\001\002\000\066\002\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\027\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\046\uffdd\001\002\000\026\004\026\005\033" +
    "\006\032\022\037\026\031\031\025\034\023\046\020\047" +
    "\030\050\024\001\002\000\026\004\026\005\033\006\032" +
    "\022\037\026\031\031\025\034\023\046\020\047\030\050" +
    "\024\001\002\000\026\004\026\005\033\006\032\022\037" +
    "\026\031\031\025\034\023\046\020\047\030\050\024\001" +
    "\002\000\026\004\026\005\033\006\032\022\037\026\031" +
    "\031\025\034\023\046\020\047\030\050\024\001\002\000" +
    "\026\004\026\005\033\006\032\022\037\026\031\031\025" +
    "\034\023\046\020\047\030\050\024\001\002\000\026\004" +
    "\026\005\033\006\032\022\037\026\031\031\025\034\023" +
    "\046\020\047\030\050\024\001\002\000\026\004\026\005" +
    "\033\006\032\022\037\026\031\031\025\034\023\046\020" +
    "\047\030\050\024\001\002\000\026\004\026\005\033\006" +
    "\032\022\037\026\031\031\025\034\023\046\020\047\030" +
    "\050\024\001\002\000\026\004\026\005\033\006\032\022" +
    "\037\026\031\031\025\034\023\046\020\047\030\050\024" +
    "\001\002\000\066\002\uffea\007\042\010\uffea\011\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\023\uffea" +
    "\024\uffea\025\uffea\027\uffea\032\uffea\033\047\034\041\035" +
    "\050\036\043\037\046\040\052\041\053\042\051\043\045" +
    "\044\054\046\uffea\001\002\000\066\002\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\032\uffe3\033" +
    "\047\034\041\035\050\036\043\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\046\uffe3\001\002\000\066\002" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\027" +
    "\uffe6\032\uffe6\033\047\034\041\035\050\036\043\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\001" +
    "\002\000\066\002\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\027\uffe7\032\uffe7\033\047\034\041\035\050" +
    "\036\043\037\uffe7\040\uffe7\041\053\042\051\043\045\044" +
    "\054\046\uffe7\001\002\000\066\002\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\032\uffe5\033\047" +
    "\034\041\035\050\036\043\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\046\uffe5\001\002\000\066\002\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\046\uffe0\001\002" +
    "\000\066\002\uffe2\007\uffe2\010\uffe2\011\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\027\uffe2\032\uffe2\033\uffe2\034\uffe2\035\050\036" +
    "\043\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\046\uffe2\001\002\000\066\002\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\027\uffe8\032\uffe8\033\047\034" +
    "\041\035\050\036\043\037\uffe8\040\uffe8\041\053\042\051" +
    "\043\045\044\054\046\uffe8\001\002\000\066\002\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\032" +
    "\uffe4\033\047\034\041\035\050\036\043\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046\uffe4\001\002\000" +
    "\066\002\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\027\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046" +
    "\uffdf\001\002\000\066\002\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\027\uffe9\032\uffe9\033\047\034\041" +
    "\035\050\036\043\037\046\040\052\041\053\042\051\043" +
    "\045\044\054\046\uffe9\001\002\000\066\002\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020" +
    "\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\027\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\050\036\043\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002\000\006" +
    "\027\075\032\074\001\002\000\040\007\042\010\055\023" +
    "\uffeb\027\uffeb\032\uffeb\033\047\034\041\035\050\036\043" +
    "\037\046\040\052\041\053\042\051\043\045\044\054\001" +
    "\002\000\026\004\026\005\033\006\032\022\037\026\031" +
    "\031\025\034\023\046\020\047\030\050\024\001\002\000" +
    "\066\002\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046" +
    "\uffd4\001\002\000\040\007\042\010\055\023\uffec\027\uffec" +
    "\032\uffec\033\047\034\041\035\050\036\043\037\046\040" +
    "\052\041\053\042\051\043\045\044\054\001\002\000\004" +
    "\046\020\001\002\000\006\023\uffd0\032\uffd0\001\002\000" +
    "\006\023\103\032\102\001\002\000\004\046\020\001\002" +
    "\000\004\024\104\001\002\000\016\011\010\015\006\016" +
    "\014\020\022\021\021\046\020\001\002\000\020\011\010" +
    "\015\006\016\014\020\022\021\021\025\107\046\020\001" +
    "\002\000\022\002\uffff\011\uffff\015\uffff\016\uffff\020\uffff" +
    "\021\uffff\025\uffff\046\uffff\001\002\000\066\002\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\046\uffd2\001\002\000" +
    "\006\023\uffd1\032\uffd1\001\002\000\066\002\uffde\007\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020" +
    "\uffde\021\uffde\023\uffde\024\uffde\025\uffde\027\uffde\032\uffde" +
    "\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\044\uffde\046\uffde\001\002\000\004" +
    "\002\001\001\002\000\026\004\026\005\033\006\032\022" +
    "\037\026\031\031\025\034\023\046\020\047\030\050\024" +
    "\001\002\000\026\004\026\005\033\006\032\022\037\026" +
    "\031\031\025\034\023\046\020\047\030\050\024\001\002" +
    "\000\052\002\ufff6\007\042\010\055\011\ufff6\015\ufff6\016" +
    "\ufff6\020\ufff6\021\ufff6\025\ufff6\033\047\034\041\035\050" +
    "\036\043\037\046\040\052\041\053\042\051\043\045\044" +
    "\054\046\ufff6\001\002\000\006\023\117\032\074\001\002" +
    "\000\024\002\ufff5\011\ufff5\015\ufff5\016\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\025\ufff5\046\ufff5\001\002\000\034\007\042" +
    "\010\055\024\121\033\047\034\041\035\050\036\043\037" +
    "\046\040\052\041\053\042\051\043\045\044\054\001\002" +
    "\000\016\011\010\015\006\016\014\020\022\021\021\046" +
    "\020\001\002\000\020\011\010\015\006\016\014\020\022" +
    "\021\021\025\123\046\020\001\002\000\024\002\ufff3\011" +
    "\ufff3\015\ufff3\016\ufff3\017\124\020\ufff3\021\ufff3\025\ufff3" +
    "\046\ufff3\001\002\000\004\024\125\001\002\000\016\011" +
    "\010\015\006\016\014\020\022\021\021\046\020\001\002" +
    "\000\020\011\010\015\006\016\014\020\022\021\021\025" +
    "\127\046\020\001\002\000\022\002\ufff2\011\ufff2\015\ufff2" +
    "\016\ufff2\020\ufff2\021\ufff2\025\ufff2\046\ufff2\001\002\000" +
    "\026\004\026\005\033\006\032\022\037\026\031\031\025" +
    "\034\023\046\020\047\030\050\024\001\002\000\006\023" +
    "\132\032\074\001\002\000\024\002\ufff4\011\ufff4\015\ufff4" +
    "\016\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\046\ufff4\001" +
    "\002\000\010\012\135\013\134\014\136\001\002\000\026" +
    "\004\026\005\033\006\032\022\037\026\031\031\025\034" +
    "\023\046\020\047\030\050\024\001\002\000\026\004\026" +
    "\005\033\006\032\022\037\026\031\031\025\034\023\046" +
    "\020\047\030\050\024\001\002\000\026\004\026\005\033" +
    "\006\032\022\037\026\031\031\025\034\023\046\020\047" +
    "\030\050\024\001\002\000\034\007\042\010\055\013\140" +
    "\033\047\034\041\035\050\036\043\037\046\040\052\041" +
    "\053\042\051\043\045\044\054\001\002\000\026\004\026" +
    "\005\033\006\032\022\037\026\031\031\025\034\023\046" +
    "\020\047\030\050\024\001\002\000\034\007\042\010\055" +
    "\024\142\033\047\034\041\035\050\036\043\037\046\040" +
    "\052\041\053\042\051\043\045\044\054\001\002\000\016" +
    "\011\010\015\006\016\014\020\022\021\021\046\020\001" +
    "\002\000\020\011\010\015\006\016\014\020\022\021\021" +
    "\025\144\046\020\001\002\000\022\002\uffef\011\uffef\015" +
    "\uffef\016\uffef\020\uffef\021\uffef\025\uffef\046\uffef\001\002" +
    "\000\036\007\042\010\055\013\147\014\146\033\047\034" +
    "\041\035\050\036\043\037\046\040\052\041\053\042\051" +
    "\043\045\044\054\001\002\000\026\004\026\005\033\006" +
    "\032\022\037\026\031\031\025\034\023\046\020\047\030" +
    "\050\024\001\002\000\026\004\026\005\033\006\032\022" +
    "\037\026\031\031\025\034\023\046\020\047\030\050\024" +
    "\001\002\000\034\007\042\010\055\024\151\033\047\034" +
    "\041\035\050\036\043\037\046\040\052\041\053\042\051" +
    "\043\045\044\054\001\002\000\016\011\010\015\006\016" +
    "\014\020\022\021\021\046\020\001\002\000\020\011\010" +
    "\015\006\016\014\020\022\021\021\025\153\046\020\001" +
    "\002\000\022\002\uffee\011\uffee\015\uffee\016\uffee\020\uffee" +
    "\021\uffee\025\uffee\046\uffee\001\002\000\034\007\042\010" +
    "\055\013\155\033\047\034\041\035\050\036\043\037\046" +
    "\040\052\041\053\042\051\043\045\044\054\001\002\000" +
    "\026\004\026\005\033\006\032\022\037\026\031\031\025" +
    "\034\023\046\020\047\030\050\024\001\002\000\034\007" +
    "\042\010\055\024\157\033\047\034\041\035\050\036\043" +
    "\037\046\040\052\041\053\042\051\043\045\044\054\001" +
    "\002\000\016\011\010\015\006\016\014\020\022\021\021" +
    "\046\020\001\002\000\020\011\010\015\006\016\014\020" +
    "\022\021\021\025\161\046\020\001\002\000\022\002\uffed" +
    "\011\uffed\015\uffed\016\uffed\020\uffed\021\uffed\025\uffed\046" +
    "\uffed\001\002\000\034\007\042\010\055\024\163\033\047" +
    "\034\041\035\050\036\043\037\046\040\052\041\053\042" +
    "\051\043\045\044\054\001\002\000\016\011\010\015\006" +
    "\016\014\020\022\021\021\046\020\001\002\000\020\011" +
    "\010\015\006\016\014\020\022\021\021\025\165\046\020" +
    "\001\002\000\022\002\ufff0\011\ufff0\015\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\025\ufff0\046\ufff0\001\002\000\034\007\042" +
    "\010\055\024\167\033\047\034\041\035\050\036\043\037" +
    "\046\040\052\041\053\042\051\043\045\044\054\001\002" +
    "\000\016\011\010\015\006\016\014\020\022\021\021\046" +
    "\020\001\002\000\020\011\010\015\006\016\014\020\022" +
    "\021\021\025\171\046\020\001\002\000\022\002\ufff1\011" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\025\ufff1\046\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\024\002\016\003\011\004\004\005\003\006" +
    "\014\007\010\010\006\011\012\017\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\026\015\165\016" +
    "\035\017\033\001\001\000\002\001\001\000\004\017\132" +
    "\001\001\000\002\001\001\000\020\004\105\005\003\006" +
    "\014\007\010\010\006\011\012\017\015\001\001\000\002" +
    "\001\001\000\012\013\026\015\117\016\035\017\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\026\015\034\016\035\017" +
    "\033\001\001\000\002\001\001\000\012\013\026\015\110" +
    "\016\035\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\026\014\071\015\072\016\035\017\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\026\015" +
    "\037\016\035\017\033\001\001\000\002\001\001\000\012" +
    "\013\026\015\070\016\035\017\033\001\001\000\012\013" +
    "\026\015\067\016\035\017\033\001\001\000\012\013\026" +
    "\015\066\016\035\017\033\001\001\000\002\001\001\000" +
    "\012\013\026\015\065\016\035\017\033\001\001\000\012" +
    "\013\026\015\064\016\035\017\033\001\001\000\012\013" +
    "\026\015\063\016\035\017\033\001\001\000\012\013\026" +
    "\015\062\016\035\017\033\001\001\000\012\013\026\015" +
    "\061\016\035\017\033\001\001\000\012\013\026\015\060" +
    "\016\035\017\033\001\001\000\012\013\026\015\057\016" +
    "\035\017\033\001\001\000\012\013\026\015\056\016\035" +
    "\017\033\001\001\000\012\013\026\015\055\016\035\017" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\026\015\075" +
    "\016\035\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\100\017\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\107\001\001\000\002\001" +
    "\001\000\022\003\104\004\004\005\003\006\014\007\010" +
    "\010\006\011\012\017\015\001\001\000\020\004\105\005" +
    "\003\006\014\007\010\010\006\011\012\017\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\026\014\115" +
    "\015\072\016\035\017\033\001\001\000\012\013\026\015" +
    "\114\016\035\017\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\121\004\004\005\003\006\014\007\010\010\006\011\012" +
    "\017\015\001\001\000\020\004\105\005\003\006\014\007" +
    "\010\010\006\011\012\017\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\125\004\004\005\003\006" +
    "\014\007\010\010\006\011\012\017\015\001\001\000\020" +
    "\004\105\005\003\006\014\007\010\010\006\011\012\017" +
    "\015\001\001\000\002\001\001\000\014\013\026\014\130" +
    "\015\072\016\035\017\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\026\015\161" +
    "\016\035\017\033\001\001\000\012\013\026\015\144\016" +
    "\035\017\033\001\001\000\012\013\026\015\136\016\035" +
    "\017\033\001\001\000\002\001\001\000\012\013\026\015" +
    "\140\016\035\017\033\001\001\000\002\001\001\000\022" +
    "\003\142\004\004\005\003\006\014\007\010\010\006\011" +
    "\012\017\015\001\001\000\020\004\105\005\003\006\014" +
    "\007\010\010\006\011\012\017\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\026\015\153\016\035" +
    "\017\033\001\001\000\012\013\026\015\147\016\035\017" +
    "\033\001\001\000\002\001\001\000\022\003\151\004\004" +
    "\005\003\006\014\007\010\010\006\011\012\017\015\001" +
    "\001\000\020\004\105\005\003\006\014\007\010\010\006" +
    "\011\012\017\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\026\015\155\016\035\017\033\001\001" +
    "\000\002\001\001\000\022\003\157\004\004\005\003\006" +
    "\014\007\010\010\006\011\012\017\015\001\001\000\020" +
    "\004\105\005\003\006\014\007\010\010\006\011\012\017" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\163\004\004\005\003\006\014\007\010\010\006\011" +
    "\012\017\015\001\001\000\020\004\105\005\003\006\014" +
    "\007\010\010\006\011\012\017\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\167\004\004\005\003" +
    "\006\014\007\010\010\006\011\012\017\015\001\001\000" +
    "\020\004\105\005\003\006\014\007\010\010\006\011\012" +
    "\017\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // document ::= instructions 
            {
              Document RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Closure i = (Closure)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Document(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              Closure RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Closure l = (Closure)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.addInstruction(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              Closure RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Closure(); RESULT.addInstruction(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= assignment 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= END 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= RETURN expression 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= if 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= while 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= for 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= functionCall 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment ::= identifier ASSIGN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionCall ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functionCall ::= functionCall ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED ELSE CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // while ::= WHILE expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // for ::= FOR identifier TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for ::= FOR identifier BY expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR identifier FROM expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= FOR identifier FROM expression BY expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= expressions COMMA expression 
            {
              LinkedList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= expression 
            {
              LinkedList<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.NOT_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression ASTERISK expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.ASTERISK, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression SLASH expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.SLASH, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperand(i, UnaryOperand.Type.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= ROUND_OPEN expression ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= literal 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal ::= identifier 
            {
              Literal RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literal ::= INTEGER 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Integer(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literal ::= UNDEFINED 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Undefined.UNDEFINED; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literal ::= functionDeclaration 
            {
              Literal RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal ::= STRING 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.String(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= SQUARE_OPEN expressions SQUARE_CLOSED 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> i = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier ::= IDENTIFIER 
            {
              ch.ffhs.fac.flang.runtime.literals.Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Identifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // functionDeclaration ::= COLON ROUND_OPEN functionArguments ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // functionArguments ::= functionArguments COMMA identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> l = (LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // functionArguments ::= identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
