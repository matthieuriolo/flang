
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ch.ffhs.fac.flang.parser;

import ch.ffhs.fac.flang.runtime.*;
import ch.ffhs.fac.flang.runtime.expressions.*;
import ch.ffhs.fac.flang.runtime.expressions.operations.*;
import ch.ffhs.fac.flang.runtime.instructions.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.math.BigDecimal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\010\005\000\002" +
    "\012\006\000\002\005\007\000\002\005\013\000\002\007" +
    "\007\000\002\006\011\000\002\006\013\000\002\006\013" +
    "\000\002\006\015\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\004\000" +
    "\002\016\005\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\003" +
    "\000\002\014\011\000\002\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\016\011\010\015\006\016\013\020\022\021" +
    "\021\044\020\001\002\000\022\002\ufffa\011\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\021\ufffa\025\ufffa\044\ufffa\001\002\000" +
    "\022\002\ufffe\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe" +
    "\025\ufffe\044\ufffe\001\002\000\024\004\026\005\033\006" +
    "\031\022\036\027\025\032\023\044\020\045\030\046\024" +
    "\001\002\000\022\002\ufffd\011\ufffd\015\ufffd\016\ufffd\020" +
    "\ufffd\021\ufffd\025\ufffd\044\ufffd\001\002\000\004\044\020" +
    "\001\002\000\022\002\ufff9\011\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\025\ufff9\044\ufff9\001\002\000\020\002\000" +
    "\011\010\015\006\016\013\020\022\021\021\044\020\001" +
    "\002\000\024\004\026\005\033\006\031\022\036\027\025" +
    "\032\023\044\020\045\030\046\024\001\002\000\022\002" +
    "\ufff8\011\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\025\ufff8" +
    "\044\ufff8\001\002\000\006\022\105\026\106\001\002\000" +
    "\004\002\104\001\002\000\022\002\ufff7\011\ufff7\015\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\025\ufff7\044\ufff7\001\002\000" +
    "\072\002\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\044\uffd5\001\002\000\024\004\026\005\033" +
    "\006\031\022\036\027\025\032\023\044\020\045\030\046" +
    "\024\001\002\000\022\002\ufffc\011\ufffc\015\ufffc\016\ufffc" +
    "\020\ufffc\021\ufffc\025\ufffc\044\ufffc\001\002\000\024\004" +
    "\026\005\033\006\031\022\036\027\025\032\023\044\020" +
    "\045\030\046\024\001\002\000\064\002\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb" +
    "\021\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\044\uffdb\001\002\000\004\022\071\001" +
    "\002\000\064\002\uffda\007\uffda\010\uffda\011\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\020\uffda\021\uffda\023\uffda\024" +
    "\uffda\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\044" +
    "\uffda\001\002\000\064\002\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\044\uffd7\001\002\000\064\002\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\001\002\000\064\002\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\001\002\000\064\002\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\001\002\000\064" +
    "\002\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\001\002" +
    "\000\052\002\ufffb\007\040\010\054\011\ufffb\015\ufffb\016" +
    "\ufffb\020\ufffb\021\ufffb\025\ufffb\031\046\032\041\033\047" +
    "\034\042\035\045\036\052\037\051\040\050\041\044\042" +
    "\053\044\ufffb\001\002\000\064\002\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\044\uffdd\001\002\000\024\004\026\005\033" +
    "\006\031\022\036\027\025\032\023\044\020\045\030\046" +
    "\024\001\002\000\034\007\040\010\054\023\043\031\046" +
    "\032\041\033\047\034\042\035\045\036\052\037\051\040" +
    "\050\041\044\042\053\001\002\000\024\004\026\005\033" +
    "\006\031\022\036\027\025\032\023\044\020\045\030\046" +
    "\024\001\002\000\024\004\026\005\033\006\031\022\036" +
    "\027\025\032\023\044\020\045\030\046\024\001\002\000" +
    "\024\004\026\005\033\006\031\022\036\027\025\032\023" +
    "\044\020\045\030\046\024\001\002\000\064\002\uffde\007" +
    "\uffde\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\044\uffde\001\002\000\024\004" +
    "\026\005\033\006\031\022\036\027\025\032\023\044\020" +
    "\045\030\046\024\001\002\000\024\004\026\005\033\006" +
    "\031\022\036\027\025\032\023\044\020\045\030\046\024" +
    "\001\002\000\024\004\026\005\033\006\031\022\036\027" +
    "\025\032\023\044\020\045\030\046\024\001\002\000\024" +
    "\004\026\005\033\006\031\022\036\027\025\032\023\044" +
    "\020\045\030\046\024\001\002\000\024\004\026\005\033" +
    "\006\031\022\036\027\025\032\023\044\020\045\030\046" +
    "\024\001\002\000\024\004\026\005\033\006\031\022\036" +
    "\027\025\032\023\044\020\045\030\046\024\001\002\000" +
    "\024\004\026\005\033\006\031\022\036\027\025\032\023" +
    "\044\020\045\030\046\024\001\002\000\024\004\026\005" +
    "\033\006\031\022\036\027\025\032\023\044\020\045\030" +
    "\046\024\001\002\000\024\004\026\005\033\006\031\022" +
    "\036\027\025\032\023\044\020\045\030\046\024\001\002" +
    "\000\064\002\uffeb\007\040\010\uffeb\011\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\030\uffeb\031\046\032\041\033\047\034\042\035" +
    "\045\036\052\037\051\040\050\041\044\042\053\044\uffeb" +
    "\001\002\000\064\002\uffe4\007\uffe4\010\uffe4\011\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\030\uffe4\031\046\032\041\033\047\034" +
    "\042\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\044\uffe4\001\002\000\064\002\uffe8\007\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\030\uffe8\031\046\032\041\033" +
    "\047\034\042\035\uffe8\036\uffe8\037\051\040\050\041\044" +
    "\042\053\044\uffe8\001\002\000\064\002\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\031\046\032" +
    "\041\033\047\034\042\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\044\uffe7\001\002\000\064\002\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\031" +
    "\046\032\041\033\047\034\042\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\044\uffe6\001\002\000\064\002" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\001\002\000" +
    "\064\002\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\uffe3\021\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\047\034\042\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\001" +
    "\002\000\064\002\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\030\uffe9\031\046\032\041\033\047\034\042" +
    "\035\uffe9\036\uffe9\037\051\040\050\041\044\042\053\044" +
    "\uffe9\001\002\000\064\002\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\030\uffe5\031\046\032\041\033\047" +
    "\034\042\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\044\uffe5\001\002\000\064\002\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\032\uffe0" +
    "\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\044\uffe0\001\002\000\064\002\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\047\034\042\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\044\uffe2\001\002\000\064\002\uffea" +
    "\007\uffea\010\uffea\011\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\020\uffea\021\uffea\023\uffea\024\uffea\025\uffea\030\uffea" +
    "\031\046\032\041\033\047\034\042\035\045\036\052\037" +
    "\051\040\050\041\044\042\053\044\uffea\001\002\000\004" +
    "\044\020\001\002\000\006\023\uffd2\030\uffd2\001\002\000" +
    "\006\023\075\030\074\001\002\000\004\044\020\001\002" +
    "\000\004\024\076\001\002\000\016\011\010\015\006\016" +
    "\013\020\022\021\021\044\020\001\002\000\020\011\010" +
    "\015\006\016\013\020\022\021\021\025\101\044\020\001" +
    "\002\000\022\002\uffff\011\uffff\015\uffff\016\uffff\020\uffff" +
    "\021\uffff\025\uffff\044\uffff\001\002\000\064\002\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\044\uffd4\001\002\000\006\023" +
    "\uffd3\030\uffd3\001\002\000\064\002\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\044\uffdf\001\002\000\004\002\001\001\002" +
    "\000\024\004\026\005\033\006\031\022\036\027\025\032" +
    "\023\044\020\045\030\046\024\001\002\000\024\004\026" +
    "\005\033\006\031\022\036\027\025\032\023\044\020\045" +
    "\030\046\024\001\002\000\052\002\ufff6\007\040\010\054" +
    "\011\ufff6\015\ufff6\016\ufff6\020\ufff6\021\ufff6\025\ufff6\031" +
    "\046\032\041\033\047\034\042\035\045\036\052\037\051" +
    "\040\050\041\044\042\053\044\ufff6\001\002\000\006\023" +
    "\113\030\112\001\002\000\036\007\040\010\054\023\uffec" +
    "\030\uffec\031\046\032\041\033\047\034\042\035\045\036" +
    "\052\037\051\040\050\041\044\042\053\001\002\000\024" +
    "\004\026\005\033\006\031\022\036\027\025\032\023\044" +
    "\020\045\030\046\024\001\002\000\022\002\ufff5\011\ufff5" +
    "\015\ufff5\016\ufff5\020\ufff5\021\ufff5\025\ufff5\044\ufff5\001" +
    "\002\000\036\007\040\010\054\023\uffed\030\uffed\031\046" +
    "\032\041\033\047\034\042\035\045\036\052\037\051\040" +
    "\050\041\044\042\053\001\002\000\034\007\040\010\054" +
    "\024\116\031\046\032\041\033\047\034\042\035\045\036" +
    "\052\037\051\040\050\041\044\042\053\001\002\000\016" +
    "\011\010\015\006\016\013\020\022\021\021\044\020\001" +
    "\002\000\020\011\010\015\006\016\013\020\022\021\021" +
    "\025\120\044\020\001\002\000\024\002\ufff4\011\ufff4\015" +
    "\ufff4\016\ufff4\017\121\020\ufff4\021\ufff4\025\ufff4\044\ufff4" +
    "\001\002\000\004\024\122\001\002\000\016\011\010\015" +
    "\006\016\013\020\022\021\021\044\020\001\002\000\020" +
    "\011\010\015\006\016\013\020\022\021\021\025\124\044" +
    "\020\001\002\000\022\002\ufff3\011\ufff3\015\ufff3\016\ufff3" +
    "\020\ufff3\021\ufff3\025\ufff3\044\ufff3\001\002\000\006\012" +
    "\127\013\126\001\002\000\024\004\026\005\033\006\031" +
    "\022\036\027\025\032\023\044\020\045\030\046\024\001" +
    "\002\000\024\004\026\005\033\006\031\022\036\027\025" +
    "\032\023\044\020\045\030\046\024\001\002\000\034\007" +
    "\040\010\054\013\131\031\046\032\041\033\047\034\042" +
    "\035\045\036\052\037\051\040\050\041\044\042\053\001" +
    "\002\000\024\004\026\005\033\006\031\022\036\027\025" +
    "\032\023\044\020\045\030\046\024\001\002\000\036\007" +
    "\040\010\054\014\133\024\134\031\046\032\041\033\047" +
    "\034\042\035\045\036\052\037\051\040\050\041\044\042" +
    "\053\001\002\000\024\004\026\005\033\006\031\022\036" +
    "\027\025\032\023\044\020\045\030\046\024\001\002\000" +
    "\016\011\010\015\006\016\013\020\022\021\021\044\020" +
    "\001\002\000\020\011\010\015\006\016\013\020\022\021" +
    "\021\025\136\044\020\001\002\000\022\002\uffef\011\uffef" +
    "\015\uffef\016\uffef\020\uffef\021\uffef\025\uffef\044\uffef\001" +
    "\002\000\034\007\040\010\054\024\140\031\046\032\041" +
    "\033\047\034\042\035\045\036\052\037\051\040\050\041" +
    "\044\042\053\001\002\000\016\011\010\015\006\016\013" +
    "\020\022\021\021\044\020\001\002\000\020\011\010\015" +
    "\006\016\013\020\022\021\021\025\142\044\020\001\002" +
    "\000\022\002\uffee\011\uffee\015\uffee\016\uffee\020\uffee\021" +
    "\uffee\025\uffee\044\uffee\001\002\000\036\007\040\010\054" +
    "\014\144\024\145\031\046\032\041\033\047\034\042\035" +
    "\045\036\052\037\051\040\050\041\044\042\053\001\002" +
    "\000\024\004\026\005\033\006\031\022\036\027\025\032" +
    "\023\044\020\045\030\046\024\001\002\000\016\011\010" +
    "\015\006\016\013\020\022\021\021\044\020\001\002\000" +
    "\020\011\010\015\006\016\013\020\022\021\021\025\147" +
    "\044\020\001\002\000\022\002\ufff1\011\ufff1\015\ufff1\016" +
    "\ufff1\020\ufff1\021\ufff1\025\ufff1\044\ufff1\001\002\000\034" +
    "\007\040\010\054\024\151\031\046\032\041\033\047\034" +
    "\042\035\045\036\052\037\051\040\050\041\044\042\053" +
    "\001\002\000\016\011\010\015\006\016\013\020\022\021" +
    "\021\044\020\001\002\000\020\011\010\015\006\016\013" +
    "\020\022\021\021\025\153\044\020\001\002\000\022\002" +
    "\ufff0\011\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\025\ufff0" +
    "\044\ufff0\001\002\000\034\007\040\010\054\024\155\031" +
    "\046\032\041\033\047\034\042\035\045\036\052\037\051" +
    "\040\050\041\044\042\053\001\002\000\016\011\010\015" +
    "\006\016\013\020\022\021\021\044\020\001\002\000\020" +
    "\011\010\015\006\016\013\020\022\021\021\025\157\044" +
    "\020\001\002\000\022\002\ufff2\011\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\021\ufff2\025\ufff2\044\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\024\002\015\003\011\004\004\005\003\006" +
    "\013\007\010\010\006\012\016\020\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\026\016\153\017" +
    "\034\020\031\001\001\000\002\001\001\000\004\020\124" +
    "\001\001\000\002\001\001\000\020\004\077\005\003\006" +
    "\013\007\010\010\006\012\016\020\014\001\001\000\012" +
    "\014\026\016\114\017\034\020\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\026\016\033\017\034\020" +
    "\031\001\001\000\002\001\001\000\012\014\026\016\102" +
    "\017\034\020\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\026\016\036" +
    "\017\034\020\031\001\001\000\002\001\001\000\012\014" +
    "\026\016\067\017\034\020\031\001\001\000\012\014\026" +
    "\016\066\017\034\020\031\001\001\000\012\014\026\016" +
    "\065\017\034\020\031\001\001\000\002\001\001\000\012" +
    "\014\026\016\064\017\034\020\031\001\001\000\012\014" +
    "\026\016\063\017\034\020\031\001\001\000\012\014\026" +
    "\016\062\017\034\020\031\001\001\000\012\014\026\016" +
    "\061\017\034\020\031\001\001\000\012\014\026\016\060" +
    "\017\034\020\031\001\001\000\012\014\026\016\057\017" +
    "\034\020\031\001\001\000\012\014\026\016\056\017\034" +
    "\020\031\001\001\000\012\014\026\016\055\017\034\020" +
    "\031\001\001\000\012\014\026\016\054\017\034\020\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\072\020\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\101\001\001\000\002\001\001\000\022" +
    "\003\076\004\004\005\003\006\013\007\010\010\006\012" +
    "\016\020\014\001\001\000\020\004\077\005\003\006\013" +
    "\007\010\010\006\012\016\020\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\026\015\107\016\110\017" +
    "\034\020\031\001\001\000\012\014\026\016\106\017\034" +
    "\020\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\026\016\113\017\034\020\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\116\004\004\005\003\006\013\007\010" +
    "\010\006\012\016\020\014\001\001\000\020\004\077\005" +
    "\003\006\013\007\010\010\006\012\016\020\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\122\004" +
    "\004\005\003\006\013\007\010\010\006\012\016\020\014" +
    "\001\001\000\020\004\077\005\003\006\013\007\010\010" +
    "\006\012\016\020\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\026\016\142\017\034\020\031\001" +
    "\001\000\012\014\026\016\127\017\034\020\031\001\001" +
    "\000\002\001\001\000\012\014\026\016\131\017\034\020" +
    "\031\001\001\000\002\001\001\000\012\014\026\016\136" +
    "\017\034\020\031\001\001\000\022\003\134\004\004\005" +
    "\003\006\013\007\010\010\006\012\016\020\014\001\001" +
    "\000\020\004\077\005\003\006\013\007\010\010\006\012" +
    "\016\020\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\140\004\004\005\003\006\013\007\010\010" +
    "\006\012\016\020\014\001\001\000\020\004\077\005\003" +
    "\006\013\007\010\010\006\012\016\020\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\026\016\147" +
    "\017\034\020\031\001\001\000\022\003\145\004\004\005" +
    "\003\006\013\007\010\010\006\012\016\020\014\001\001" +
    "\000\020\004\077\005\003\006\013\007\010\010\006\012" +
    "\016\020\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\151\004\004\005\003\006\013\007\010\010" +
    "\006\012\016\020\014\001\001\000\020\004\077\005\003" +
    "\006\013\007\010\010\006\012\016\020\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\155\004\004" +
    "\005\003\006\013\007\010\010\006\012\016\020\014\001" +
    "\001\000\020\004\077\005\003\006\013\007\010\010\006" +
    "\012\016\020\014\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // document ::= instructions 
            {
              Document RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Document(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> l = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= instruction 
            {
              List<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruction>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= assignment 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= END 
            {
              Instruction RESULT =null;
		 RESULT = new Return(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= RETURN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= if 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= while 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= for 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= functionProcedure 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment ::= identifier ASSIGN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionProcedure ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionProcedure(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionProcedure",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED ELSE CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> o = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // while ::= WHILE expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // for ::= FOR identifier TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // for ::= FOR identifier TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for ::= FOR identifier FROM expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR identifier FROM expression TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expressions ::= expressions COMMA expression 
            {
              LinkedList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= expression 
            {
              LinkedList<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.NOT_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression ASTERISK expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.ASTERISK, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression SLASH expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.SLASH, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperand(i, UnaryOperand.Type.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= ROUND_OPEN expression ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= literal 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LiteralWrapper(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= identifier 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal ::= DECIMAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BigDecimal i = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Decimal(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literal ::= UNDEFINED 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Undefined.UNDEFINED; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literal ::= functionDeclaration 
            {
              Literal RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literal ::= STRING 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.String(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identifier ::= IDENTIFIER 
            {
              ch.ffhs.fac.flang.runtime.literals.Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Identifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // functionDeclaration ::= COLON ROUND_OPEN functionArguments ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Expression RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // functionArguments ::= functionArguments COMMA identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> l = (LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // functionArguments ::= identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
