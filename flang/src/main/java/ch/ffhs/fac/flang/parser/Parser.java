
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ch.ffhs.fac.flang.parser;

import ch.ffhs.fac.flang.parser.interfaces.Expression;
import ch.ffhs.fac.flang.parser.interfaces.Instruction;
import ch.ffhs.fac.flang.parser.interfaces.Literal;
import ch.ffhs.fac.flang.runtime.*;
import ch.ffhs.fac.flang.runtime.expressions.*;
import ch.ffhs.fac.flang.runtime.expressions.operations.*;
import ch.ffhs.fac.flang.runtime.instructions.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.math.BigDecimal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\010\005\000\002" +
    "\012\006\000\002\012\006\000\002\005\007\000\002\005" +
    "\013\000\002\007\007\000\002\006\011\000\002\006\013" +
    "\000\002\006\013\000\002\006\015\000\002\015\005\000" +
    "\002\015\003\000\002\015\002\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\014\010\000\002\014\011\000\002\013\005\000\002" +
    "\013\003\000\002\011\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\020\002\ufffe\011\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\044\ufffe\001\002\000\004\002\175\001\002" +
    "\000\020\002\000\011\012\015\010\016\014\020\023\021" +
    "\022\044\021\001\002\000\022\002\ufffa\011\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\021\ufffa\025\ufffa\044\ufffa\001\002\000" +
    "\022\002\uffff\011\uffff\015\uffff\016\uffff\020\uffff\021\uffff" +
    "\025\uffff\044\uffff\001\002\000\024\004\027\005\034\006" +
    "\032\022\040\027\026\032\024\044\021\045\031\046\025" +
    "\001\002\000\022\002\ufffd\011\ufffd\015\ufffd\016\ufffd\020" +
    "\ufffd\021\ufffd\025\ufffd\044\ufffd\001\002\000\004\044\021" +
    "\001\002\000\022\002\ufff9\011\ufff9\015\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\025\ufff9\044\ufff9\001\002\000\024\004\027" +
    "\005\034\006\032\022\040\027\026\032\024\044\021\045" +
    "\031\046\025\001\002\000\004\022\127\001\002\000\022" +
    "\002\ufff8\011\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\025" +
    "\ufff8\044\ufff8\001\002\000\006\022\122\026\123\001\002" +
    "\000\022\002\ufff7\011\ufff7\015\ufff7\016\ufff7\020\ufff7\021" +
    "\ufff7\025\ufff7\044\ufff7\001\002\000\072\002\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2" +
    "\001\002\000\024\004\027\005\034\006\032\022\040\027" +
    "\026\032\024\044\021\045\031\046\025\001\002\000\022" +
    "\002\ufffc\011\ufffc\015\ufffc\016\ufffc\020\ufffc\021\ufffc\025" +
    "\ufffc\044\ufffc\001\002\000\024\004\027\005\034\006\032" +
    "\022\040\027\026\032\024\044\021\045\031\046\025\001" +
    "\002\000\064\002\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044" +
    "\uffd8\001\002\000\004\022\104\001\002\000\064\002\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\001\002\000\064" +
    "\002\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\001\002" +
    "\000\064\002\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\001\002\000\064\002\uffd5\007\uffd5\010\uffd5\011\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\044\uffd5\001\002\000\066\002\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\020\uffdb\021\uffdb" +
    "\022\101\023\uffdb\024\uffdb\025\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\044\uffdb\001\002\000\064\002\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\001\002\000\066\002" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\020\uffd9\021\uffd9\022\073\023\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\001" +
    "\002\000\052\002\ufffb\007\043\010\056\011\ufffb\015\ufffb" +
    "\016\ufffb\020\ufffb\021\ufffb\025\ufffb\031\050\032\042\033" +
    "\051\034\044\035\047\036\054\037\053\040\052\041\046" +
    "\042\055\044\ufffb\001\002\000\064\002\uffda\007\uffda\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\044\uffda\001\002\000\024\004\027\005" +
    "\034\006\032\022\040\027\026\032\024\044\021\045\031" +
    "\046\025\001\002\000\034\007\043\010\056\023\045\031" +
    "\050\032\042\033\051\034\044\035\047\036\054\037\053" +
    "\040\052\041\046\042\055\001\002\000\024\004\027\005" +
    "\034\006\032\022\040\027\026\032\024\044\021\045\031" +
    "\046\025\001\002\000\024\004\027\005\034\006\032\022" +
    "\040\027\026\032\024\044\021\045\031\046\025\001\002" +
    "\000\024\004\027\005\034\006\032\022\040\027\026\032" +
    "\024\044\021\045\031\046\025\001\002\000\064\002\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\001\002\000\024" +
    "\004\027\005\034\006\032\022\040\027\026\032\024\044" +
    "\021\045\031\046\025\001\002\000\024\004\027\005\034" +
    "\006\032\022\040\027\026\032\024\044\021\045\031\046" +
    "\025\001\002\000\024\004\027\005\034\006\032\022\040" +
    "\027\026\032\024\044\021\045\031\046\025\001\002\000" +
    "\024\004\027\005\034\006\032\022\040\027\026\032\024" +
    "\044\021\045\031\046\025\001\002\000\024\004\027\005" +
    "\034\006\032\022\040\027\026\032\024\044\021\045\031" +
    "\046\025\001\002\000\024\004\027\005\034\006\032\022" +
    "\040\027\026\032\024\044\021\045\031\046\025\001\002" +
    "\000\024\004\027\005\034\006\032\022\040\027\026\032" +
    "\024\044\021\045\031\046\025\001\002\000\024\004\027" +
    "\005\034\006\032\022\040\027\026\032\024\044\021\045" +
    "\031\046\025\001\002\000\024\004\027\005\034\006\032" +
    "\022\040\027\026\032\024\044\021\045\031\046\025\001" +
    "\002\000\064\002\uffe9\007\043\010\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\030\uffe9\031\050\032\042\033\051\034\044" +
    "\035\047\036\054\037\053\040\052\041\046\042\055\044" +
    "\uffe9\001\002\000\064\002\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\030\uffe2\031\050\032\042\033\051" +
    "\034\044\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\044\uffe2\001\002\000\064\002\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\030\uffe6\031\050\032\042" +
    "\033\051\034\044\035\uffe6\036\uffe6\037\053\040\052\041" +
    "\046\042\055\044\uffe6\001\002\000\064\002\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020" +
    "\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5\031\050" +
    "\032\042\033\051\034\044\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\044\uffe5\001\002\000\064\002\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\020\uffe4\021\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4" +
    "\031\050\032\042\033\051\034\044\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\042\uffe4\044\uffe4\001\002\000\064" +
    "\002\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\001\002" +
    "\000\064\002\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\030\uffe1\031\uffe1\032\uffe1\033\051\034\044\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1" +
    "\001\002\000\064\002\uffe7\007\uffe7\010\uffe7\011\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\030\uffe7\031\050\032\042\033\051\034" +
    "\044\035\uffe7\036\uffe7\037\053\040\052\041\046\042\055" +
    "\044\uffe7\001\002\000\064\002\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\030\uffe3\031\050\032\042\033" +
    "\051\034\044\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\044\uffe3\001\002\000\064\002\uffde\007\uffde\010" +
    "\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\021\uffde\023\uffde\024\uffde\025\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\044\uffde\001\002\000\064\002\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\030\uffe8\031" +
    "\050\032\042\033\051\034\044\035\047\036\054\037\053" +
    "\040\052\041\046\042\055\044\uffe8\001\002\000\064\002" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\051\034\044\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\001\002\000" +
    "\030\004\027\005\034\006\032\022\040\023\uffea\027\026" +
    "\030\uffea\032\024\044\021\045\031\046\025\001\002\000" +
    "\006\023\077\030\076\001\002\000\036\007\043\010\056" +
    "\023\uffeb\030\uffeb\031\050\032\042\033\051\034\044\035" +
    "\047\036\054\037\053\040\052\041\046\042\055\001\002" +
    "\000\024\004\027\005\034\006\032\022\040\027\026\032" +
    "\024\044\021\045\031\046\025\001\002\000\066\002\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\013\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\044\uffcd\001\002" +
    "\000\036\007\043\010\056\023\uffec\030\uffec\031\050\032" +
    "\042\033\051\034\044\035\047\036\054\037\053\040\052" +
    "\041\046\042\055\001\002\000\030\004\027\005\034\006" +
    "\032\022\040\023\uffea\027\026\030\uffea\032\024\044\021" +
    "\045\031\046\025\001\002\000\006\023\103\030\076\001" +
    "\002\000\066\002\uffcc\007\uffcc\010\uffcc\011\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042" +
    "\uffcc\044\uffcc\001\002\000\006\023\105\044\021\001\002" +
    "\000\004\024\116\001\002\000\006\023\uffce\030\uffce\001" +
    "\002\000\006\023\111\030\110\001\002\000\004\044\021" +
    "\001\002\000\004\024\112\001\002\000\020\011\ufffe\015" +
    "\ufffe\016\ufffe\020\ufffe\021\ufffe\025\ufffe\044\ufffe\001\002" +
    "\000\020\011\012\015\010\016\014\020\023\021\022\025" +
    "\114\044\021\001\002\000\064\002\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\044\uffd0\001\002\000\006\023\uffcf\030\uffcf" +
    "\001\002\000\020\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021" +
    "\ufffe\025\ufffe\044\ufffe\001\002\000\020\011\012\015\010" +
    "\016\014\020\023\021\022\025\120\044\021\001\002\000" +
    "\064\002\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\001" +
    "\002\000\064\002\uffdd\007\uffdd\010\uffdd\011\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\001\002\000\030\004\027\005\034\006\032\022\040" +
    "\023\uffea\027\026\030\uffea\032\024\044\021\045\031\046" +
    "\025\001\002\000\024\004\027\005\034\006\032\022\040" +
    "\027\026\032\024\044\021\045\031\046\025\001\002\000" +
    "\052\002\ufff6\007\043\010\056\011\ufff6\015\ufff6\016\ufff6" +
    "\020\ufff6\021\ufff6\025\ufff6\031\050\032\042\033\051\034" +
    "\044\035\047\036\054\037\053\040\052\041\046\042\055" +
    "\044\ufff6\001\002\000\006\023\126\030\076\001\002\000" +
    "\024\002\ufff5\011\ufff5\015\ufff5\016\ufff5\020\ufff5\021\ufff5" +
    "\022\uffcd\025\ufff5\044\ufff5\001\002\000\030\004\027\005" +
    "\034\006\032\022\040\023\uffea\027\026\030\uffea\032\024" +
    "\044\021\045\031\046\025\001\002\000\006\023\131\030" +
    "\076\001\002\000\024\002\ufff4\011\ufff4\015\ufff4\016\ufff4" +
    "\020\ufff4\021\ufff4\022\uffcc\025\ufff4\044\ufff4\001\002\000" +
    "\034\007\043\010\056\024\133\031\050\032\042\033\051" +
    "\034\044\035\047\036\054\037\053\040\052\041\046\042" +
    "\055\001\002\000\020\011\ufffe\015\ufffe\016\ufffe\020\ufffe" +
    "\021\ufffe\025\ufffe\044\ufffe\001\002\000\020\011\012\015" +
    "\010\016\014\020\023\021\022\025\135\044\021\001\002" +
    "\000\024\002\ufff3\011\ufff3\015\ufff3\016\ufff3\017\136\020" +
    "\ufff3\021\ufff3\025\ufff3\044\ufff3\001\002\000\004\024\137" +
    "\001\002\000\020\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021" +
    "\ufffe\025\ufffe\044\ufffe\001\002\000\020\011\012\015\010" +
    "\016\014\020\023\021\022\025\141\044\021\001\002\000" +
    "\022\002\ufff2\011\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\025\ufff2\044\ufff2\001\002\000\006\012\144\013\143\001" +
    "\002\000\024\004\027\005\034\006\032\022\040\027\026" +
    "\032\024\044\021\045\031\046\025\001\002\000\024\004" +
    "\027\005\034\006\032\022\040\027\026\032\024\044\021" +
    "\045\031\046\025\001\002\000\034\007\043\010\056\013" +
    "\146\031\050\032\042\033\051\034\044\035\047\036\054" +
    "\037\053\040\052\041\046\042\055\001\002\000\024\004" +
    "\027\005\034\006\032\022\040\027\026\032\024\044\021" +
    "\045\031\046\025\001\002\000\036\007\043\010\056\014" +
    "\150\024\151\031\050\032\042\033\051\034\044\035\047" +
    "\036\054\037\053\040\052\041\046\042\055\001\002\000" +
    "\024\004\027\005\034\006\032\022\040\027\026\032\024" +
    "\044\021\045\031\046\025\001\002\000\020\011\ufffe\015" +
    "\ufffe\016\ufffe\020\ufffe\021\ufffe\025\ufffe\044\ufffe\001\002" +
    "\000\020\011\012\015\010\016\014\020\023\021\022\025" +
    "\153\044\021\001\002\000\022\002\uffee\011\uffee\015\uffee" +
    "\016\uffee\020\uffee\021\uffee\025\uffee\044\uffee\001\002\000" +
    "\034\007\043\010\056\024\155\031\050\032\042\033\051" +
    "\034\044\035\047\036\054\037\053\040\052\041\046\042" +
    "\055\001\002\000\020\011\ufffe\015\ufffe\016\ufffe\020\ufffe" +
    "\021\ufffe\025\ufffe\044\ufffe\001\002\000\020\011\012\015" +
    "\010\016\014\020\023\021\022\025\157\044\021\001\002" +
    "\000\022\002\uffed\011\uffed\015\uffed\016\uffed\020\uffed\021" +
    "\uffed\025\uffed\044\uffed\001\002\000\036\007\043\010\056" +
    "\014\161\024\162\031\050\032\042\033\051\034\044\035" +
    "\047\036\054\037\053\040\052\041\046\042\055\001\002" +
    "\000\024\004\027\005\034\006\032\022\040\027\026\032" +
    "\024\044\021\045\031\046\025\001\002\000\020\011\ufffe" +
    "\015\ufffe\016\ufffe\020\ufffe\021\ufffe\025\ufffe\044\ufffe\001" +
    "\002\000\020\011\012\015\010\016\014\020\023\021\022" +
    "\025\164\044\021\001\002\000\022\002\ufff0\011\ufff0\015" +
    "\ufff0\016\ufff0\020\ufff0\021\ufff0\025\ufff0\044\ufff0\001\002" +
    "\000\034\007\043\010\056\024\166\031\050\032\042\033" +
    "\051\034\044\035\047\036\054\037\053\040\052\041\046" +
    "\042\055\001\002\000\020\011\ufffe\015\ufffe\016\ufffe\020" +
    "\ufffe\021\ufffe\025\ufffe\044\ufffe\001\002\000\020\011\012" +
    "\015\010\016\014\020\023\021\022\025\170\044\021\001" +
    "\002\000\022\002\uffef\011\uffef\015\uffef\016\uffef\020\uffef" +
    "\021\uffef\025\uffef\044\uffef\001\002\000\034\007\043\010" +
    "\056\024\172\031\050\032\042\033\051\034\044\035\047" +
    "\036\054\037\053\040\052\041\046\042\055\001\002\000" +
    "\020\011\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe\025\ufffe" +
    "\044\ufffe\001\002\000\020\011\012\015\010\016\014\020" +
    "\023\021\022\025\174\044\021\001\002\000\022\002\ufff1" +
    "\011\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\025\ufff1\044" +
    "\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\173\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\022\004\006\005\005\006\015\007\012\010\010" +
    "\011\014\012\017\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\032\014\027\016\170\017\036" +
    "\020\034\001\001\000\002\001\001\000\004\020\141\001" +
    "\001\000\002\001\001\000\014\011\032\014\027\016\131" +
    "\017\036\020\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\032\014\027\016\035\017\036\020\034\001" +
    "\001\000\002\001\001\000\014\011\032\014\027\016\120" +
    "\017\036\020\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\032\014\027\016\040\017\036\020\034\001\001\000" +
    "\002\001\001\000\014\011\032\014\027\016\071\017\036" +
    "\020\034\001\001\000\014\011\032\014\027\016\070\017" +
    "\036\020\034\001\001\000\014\011\032\014\027\016\067" +
    "\017\036\020\034\001\001\000\002\001\001\000\014\011" +
    "\032\014\027\016\066\017\036\020\034\001\001\000\014" +
    "\011\032\014\027\016\065\017\036\020\034\001\001\000" +
    "\014\011\032\014\027\016\064\017\036\020\034\001\001" +
    "\000\014\011\032\014\027\016\063\017\036\020\034\001" +
    "\001\000\014\011\032\014\027\016\062\017\036\020\034" +
    "\001\001\000\014\011\032\014\027\016\061\017\036\020" +
    "\034\001\001\000\014\011\032\014\027\016\060\017\036" +
    "\020\034\001\001\000\014\011\032\014\027\016\057\017" +
    "\036\020\034\001\001\000\014\011\032\014\027\016\056" +
    "\017\036\020\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\032\014\027\015\073\016\074\017" +
    "\036\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\032\014\027\016\077\017\036\020\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\032" +
    "\014\027\015\101\016\074\017\036\020\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\106\020\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\114\001\001\000\002\001\001\000\004" +
    "\003\112\001\001\000\022\004\006\005\005\006\015\007" +
    "\012\010\010\011\014\012\017\020\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\116\001\001\000" +
    "\022\004\006\005\005\006\015\007\012\010\010\011\014" +
    "\012\017\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\011\032\014\027\015\124\016\074\017\036" +
    "\020\034\001\001\000\014\011\032\014\027\016\123\017" +
    "\036\020\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\032\014\027\015\127\016" +
    "\074\017\036\020\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\133\001\001\000" +
    "\022\004\006\005\005\006\015\007\012\010\010\011\014" +
    "\012\017\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\137\001\001\000\022\004\006\005\005" +
    "\006\015\007\012\010\010\011\014\012\017\020\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\032" +
    "\014\027\016\157\017\036\020\034\001\001\000\014\011" +
    "\032\014\027\016\144\017\036\020\034\001\001\000\002" +
    "\001\001\000\014\011\032\014\027\016\146\017\036\020" +
    "\034\001\001\000\002\001\001\000\014\011\032\014\027" +
    "\016\153\017\036\020\034\001\001\000\004\003\151\001" +
    "\001\000\022\004\006\005\005\006\015\007\012\010\010" +
    "\011\014\012\017\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\155\001\001\000\022\004\006" +
    "\005\005\006\015\007\012\010\010\011\014\012\017\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\032\014\027\016\164\017\036\020\034\001\001\000" +
    "\004\003\162\001\001\000\022\004\006\005\005\006\015" +
    "\007\012\010\010\011\014\012\017\020\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\166\001\001" +
    "\000\022\004\006\005\005\006\015\007\012\010\010\011" +
    "\014\012\017\020\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\172\001\001\000\022\004\006\005" +
    "\005\006\015\007\012\010\010\011\014\012\017\020\016" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // document ::= instructions 
            {
              Document RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Document(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= instructions instruction 
            {
              List<Instruction> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> l = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instructions ::= 
            {
              List<Instruction> RESULT =null;
		 RESULT = new LinkedList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructions",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= assignment 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= END 
            {
              Instruction RESULT =null;
		 RESULT = new Return(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruction ::= RETURN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= if 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= while 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= for 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= functionProcedure 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assignment ::= identifier ASSIGN expression 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assignment(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // functionProcedure ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionProcedure(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionProcedure",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functionProcedure ::= functionCall ROUND_OPEN expressions ROUND_CLOSED 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionProcedure(c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionProcedure",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= IF expression CURLY_OPEN instructions CURLY_CLOSED ELSE CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> o = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new If(e, i, o); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // while ::= WHILE expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // for ::= FOR identifier TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for ::= FOR identifier TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, BigDecimal.ZERO, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // for ::= FOR identifier FROM expression TO expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, BigDecimal.ONE, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for ::= FOR identifier FROM expression TO expression BY expression CURLY_OPEN instructions CURLY_CLOSED 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> s = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i, f, t, b, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expressions ::= expressions COMMA expression 
            {
              LinkedList<Expression> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> l = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expressions ::= expression 
            {
              LinkedList<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Expression>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expressions ::= 
            {
              LinkedList<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.OR, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.AND, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression NOT_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.NOT_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression LESS_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.LESS_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression GREATER_EQUAL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.GREATER_EQUAL, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.PLUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.MINUS, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression ASTERISK expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.ASTERISK, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression SLASH expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BiOperand(l, BiOperand.Type.SLASH, r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperand(i, UnaryOperand.Type.MINUS); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= ROUND_OPEN expression ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= functionCall 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= literal 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= identifier 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // literal ::= DECIMAL 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BigDecimal i = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Decimal(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // literal ::= TRUE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.TRUE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // literal ::= FALSE 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Boolean.FALSE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // literal ::= UNDEFINED 
            {
              Literal RESULT =null;
		 RESULT = ch.ffhs.fac.flang.runtime.literals.Undefined.UNDEFINED; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= functionDeclaration 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Literal i = (Literal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= STRING 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.String(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier ::= IDENTIFIER 
            {
              ch.ffhs.fac.flang.runtime.literals.Identifier RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Identifier(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // functionDeclaration ::= COLON ROUND_OPEN ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Literal RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Function(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // functionDeclaration ::= COLON ROUND_OPEN functionArguments ROUND_CLOSED CURLY_OPEN instructions CURLY_CLOSED 
            {
              Literal RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> a = (LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruction> i = (List<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ch.ffhs.fac.flang.runtime.literals.Function(a, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // functionArguments ::= functionArguments COMMA identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> l = (LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;  l.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // functionArguments ::= identifier 
            {
              LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<ch.ffhs.fac.flang.runtime.literals.Identifier>(); RESULT.add(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionArguments",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // functionCall ::= identifier ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ch.ffhs.fac.flang.runtime.literals.Identifier i = (ch.ffhs.fac.flang.runtime.literals.Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // functionCall ::= functionCall ROUND_OPEN expressions ROUND_CLOSED 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> e = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCall(c, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionCall",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
