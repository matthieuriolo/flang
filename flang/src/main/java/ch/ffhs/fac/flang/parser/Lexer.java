// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/resources/flang.jflex

package ch.ffhs.fac.flang.parser;

/*
 FLang Lexer
*/

import java_cup.runtime.*;

import ch.ffhs.fac.flang.parser.exceptions.IllegalSymbol;

/**
 * Autogenerated lexer for Flang - see flang.jflex
 */


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\2\u2000\1\u2100\7\u2000\1\u2200\1\u2300\1\u2400"+
    "\1\u2000\1\u2500\1\u2600\2\u2000\31\u1100\1\u2700\121\u1100\1\u2800"+
    "\4\u1100\1\u2900\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00"+
    "\1\u2f00\53\u1100\1\u3000\41\u2000\1\u1100\1\u3100\1\u3200\1\u1100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u3b00\1\u1100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u2000\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00"+
    "\1\u5000\1\u5100\1\u2000\3\u1100\1\u5200\1\u5300\1\u5400\12\u2000"+
    "\4\u1100\1\u5500\17\u2000\2\u1100\1\u5600\41\u2000\2\u1100\1\u5700"+
    "\1\u5800\2\u2000\1\u5900\1\u5a00\27\u1100\1\u5b00\2\u1100\1\u5c00"+
    "\45\u2000\1\u1100\1\u5d00\1\u5e00\11\u2000\1\u5f00\24\u2000\1\u6000"+
    "\1\u6100\1\u2000\1\u6200\1\u6300\1\u6400\1\u6500\2\u2000\1\u6600"+
    "\5\u2000\1\u6700\1\u6800\1\u6900\5\u2000\1\u6a00\1\u6b00\4\u2000"+
    "\1\u6c00\2\u2000\1\u6d00\16\u2000\246\u1100\1\u6e00\20\u1100\1\u6f00"+
    "\1\u7000\25\u1100\1\u7100\34\u1100\1\u7200\14\u2000\2\u1100\1\u7300"+
    "\u0b06\u2000\1\u7400\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\3\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\17\11\20\1\21"+
    "\1\0\1\22\1\23\1\24\2\0\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\27\1\33\1\34\2\27\1\35"+
    "\1\36\1\37\1\40\2\27\1\41\1\42\1\43\1\44"+
    "\1\27\1\45\1\27\1\46\1\27\1\0\1\47\2\0"+
    "\1\50\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\27\1\33\1\34\2\27\1\35\1\36\1\37\1\40"+
    "\2\27\1\41\1\42\1\43\1\44\1\27\1\45\1\27"+
    "\1\46\1\27\1\51\1\0\1\52\44\0\4\7\4\0"+
    "\1\27\12\0\1\27\4\0\1\27\5\0\27\27\1\0"+
    "\37\27\1\0\70\27\2\34\115\27\1\42\u0142\27\4\0"+
    "\14\27\16\0\5\27\7\0\1\27\1\0\1\27\21\0"+
    "\160\53\5\27\1\0\2\27\2\0\4\27\1\0\1\27"+
    "\6\0\1\27\1\0\3\27\1\0\1\27\1\0\24\27"+
    "\1\0\123\27\1\0\213\27\1\0\7\53\246\27\1\0"+
    "\46\27\2\0\1\27\6\0\1\53\47\27\1\53\6\0"+
    "\1\7\1\0\55\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\1\53\10\0\33\27\4\0\1\53\3\27"+
    "\30\0\1\7\4\0\13\53\5\0\53\27\25\53\12\17"+
    "\4\0\2\27\1\53\143\27\1\0\1\27\7\53\2\0"+
    "\6\53\2\27\2\53\1\0\4\53\2\27\12\17\3\27"+
    "\2\0\1\27\20\0\1\27\1\53\36\27\33\53\2\0"+
    "\131\27\13\53\1\27\16\0\12\17\41\27\11\53\2\27"+
    "\4\0\1\27\2\0\1\53\2\0\26\27\4\53\1\27"+
    "\11\53\1\27\3\53\1\27\5\53\22\0\31\27\3\53"+
    "\4\0\13\27\65\0\25\27\1\0\10\27\25\0\17\53"+
    "\1\0\41\53\66\27\3\53\1\27\22\53\1\27\7\53"+
    "\12\27\2\53\2\0\12\17\1\0\20\27\3\53\1\0"+
    "\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0"+
    "\1\27\3\0\4\27\2\0\1\53\1\27\7\53\2\0"+
    "\2\53\2\0\3\53\1\27\10\0\1\53\4\0\2\27"+
    "\1\0\3\27\2\53\2\0\12\17\2\27\2\7\7\0"+
    "\1\7\1\27\1\0\1\53\2\0\3\53\1\0\6\27"+
    "\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\27\1\0\2\27\2\0\1\53\1\0\5\53"+
    "\4\0\2\53\2\0\3\53\3\0\1\53\7\0\4\27"+
    "\1\0\1\27\7\0\12\17\2\53\3\27\1\53\13\0"+
    "\3\53\1\0\11\27\1\0\3\27\1\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\2\0\1\53\1\27"+
    "\10\53\1\0\3\53\1\0\3\53\2\0\1\27\17\0"+
    "\2\27\2\53\2\0\12\17\1\0\1\7\7\0\1\27"+
    "\6\53\1\0\3\53\1\0\10\27\2\0\2\27\2\0"+
    "\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0"+
    "\1\53\1\27\7\53\2\0\2\53\2\0\3\53\10\0"+
    "\2\53\4\0\2\27\1\0\3\27\2\53\2\0\12\17"+
    "\1\0\1\27\20\0\1\53\1\27\1\0\6\27\3\0"+
    "\3\27\1\0\4\27\3\0\2\27\1\0\1\27\1\0"+
    "\2\27\3\0\2\27\3\0\3\27\3\0\14\27\4\0"+
    "\5\53\3\0\3\53\1\0\4\53\2\0\1\27\6\0"+
    "\1\53\16\0\12\17\11\0\1\7\6\0\5\53\10\27"+
    "\1\0\3\27\1\0\27\27\1\0\20\27\3\0\1\27"+
    "\7\53\1\0\3\53\1\0\4\53\7\0\2\53\1\0"+
    "\3\27\5\0\2\27\2\53\2\0\12\17\20\0\1\27"+
    "\3\53\1\0\10\27\1\0\3\27\1\0\27\27\1\0"+
    "\12\27\1\0\5\27\2\0\1\53\1\27\7\53\1\0"+
    "\3\53\1\0\4\53\7\0\2\53\7\0\1\27\1\0"+
    "\2\27\2\53\2\0\12\17\1\0\2\27\15\0\4\53"+
    "\1\0\10\27\1\0\3\27\1\0\51\27\2\53\1\27"+
    "\7\53\1\0\3\53\1\0\4\53\1\27\5\0\3\27"+
    "\1\53\7\0\3\27\2\53\2\0\12\17\12\0\6\27"+
    "\2\0\2\53\1\0\22\27\3\0\30\27\1\0\11\27"+
    "\1\0\1\27\2\0\7\27\3\0\1\53\4\0\6\53"+
    "\1\0\1\53\1\0\10\53\6\0\12\17\2\0\2\53"+
    "\15\0\60\27\1\53\2\27\7\53\4\0\1\7\7\27"+
    "\10\53\1\0\12\17\47\0\2\27\1\0\1\27\1\0"+
    "\1\53\2\27\1\53\1\27\1\0\1\53\1\27\6\53"+
    "\4\27\1\53\7\27\1\53\3\27\1\0\1\27\1\0"+
    "\1\27\2\53\2\27\1\53\4\27\1\53\2\27\11\53"+
    "\1\27\2\0\5\27\1\0\1\27\1\0\6\53\2\0"+
    "\12\17\2\0\4\27\40\0\1\27\27\0\2\53\6\0"+
    "\12\17\13\0\1\53\1\0\1\53\1\0\1\53\4\0"+
    "\2\53\10\27\1\0\44\27\4\0\24\53\1\0\2\53"+
    "\5\27\13\53\1\0\44\53\11\0\1\53\71\0\53\27"+
    "\24\53\1\27\12\17\6\0\6\27\4\53\4\27\3\53"+
    "\1\27\3\53\2\27\7\53\3\27\4\53\15\27\14\53"+
    "\1\27\1\53\12\17\4\53\2\0\46\27\1\0\1\27"+
    "\5\0\1\27\2\0\53\27\1\0\u014d\27\1\0\4\27"+
    "\2\0\7\27\1\0\1\27\1\0\4\27\2\0\51\27"+
    "\1\0\4\27\2\0\41\27\1\0\4\27\2\0\7\27"+
    "\1\0\1\27\1\0\4\27\2\0\17\27\1\0\71\27"+
    "\1\0\4\27\2\0\103\27\2\0\3\53\40\0\20\27"+
    "\20\0\126\27\2\0\6\27\3\0\u016c\27\2\0\21\27"+
    "\1\0\32\27\5\0\113\27\3\0\13\27\7\0\15\27"+
    "\1\0\4\27\3\53\13\0\22\27\3\53\13\0\22\27"+
    "\2\53\14\0\15\27\1\0\3\27\1\0\2\53\14\0"+
    "\64\27\40\53\3\0\1\27\3\0\1\7\1\27\1\53"+
    "\2\0\12\17\41\0\3\53\2\0\12\17\6\0\130\27"+
    "\1\53\7\0\5\27\2\53\42\27\1\53\1\27\5\0"+
    "\106\27\12\0\37\27\1\0\14\53\4\0\14\53\12\0"+
    "\12\17\36\27\2\0\5\27\13\0\54\27\4\0\32\27"+
    "\6\0\12\17\46\0\27\27\5\53\4\0\65\27\12\53"+
    "\1\0\35\53\2\0\1\53\12\17\6\0\12\17\15\0"+
    "\1\27\10\0\17\53\101\0\5\53\57\27\21\53\7\27"+
    "\4\0\12\17\21\0\11\53\14\0\3\53\36\27\15\53"+
    "\2\27\12\17\54\27\16\53\14\0\44\27\24\53\10\0"+
    "\12\17\3\0\3\27\12\17\44\27\2\0\11\27\7\0"+
    "\53\53\2\0\3\53\20\0\3\53\1\0\25\53\4\27"+
    "\1\53\4\27\3\53\2\27\4\53\5\0\300\27\72\53"+
    "\1\0\5\53\26\27\2\0\6\27\2\0\46\27\2\0"+
    "\6\27\2\0\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\37\27\2\0\65\27\1\0\7\27\1\0"+
    "\1\27\3\0\3\27\1\0\7\27\3\0\4\27\2\0"+
    "\6\27\4\0\15\27\5\0\3\27\1\0\7\27\102\0"+
    "\2\27\23\0\1\27\34\0\1\27\15\0\1\27\20\0"+
    "\15\27\3\0\40\7\20\0\41\53\21\0\1\27\4\0"+
    "\1\27\2\0\12\27\1\0\1\27\3\0\5\27\6\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\1\0"+
    "\13\27\2\0\4\27\5\0\5\27\4\0\1\27\21\0"+
    "\51\27\u022d\0\64\53\26\0\57\27\1\0\57\27\1\0"+
    "\205\27\6\0\4\27\3\53\2\27\14\0\46\27\1\0"+
    "\1\27\5\0\1\27\2\0\70\27\7\0\1\27\17\0"+
    "\1\53\27\27\11\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\40\53\57\0\1\27\325\0\3\27"+
    "\31\0\11\27\6\53\1\0\5\27\2\0\5\27\4\0"+
    "\126\27\2\0\2\53\2\0\3\27\1\0\132\27\1\0"+
    "\4\27\5\0\52\27\1\53\1\0\136\27\21\0\33\27"+
    "\65\0\306\27\112\0\353\27\5\53\20\0\215\27\103\0"+
    "\56\27\2\0\15\27\3\0\20\27\12\17\2\27\24\0"+
    "\57\27\4\53\1\0\12\53\1\0\37\27\2\53\120\27"+
    "\2\53\45\0\11\27\2\0\147\27\2\0\44\27\1\53"+
    "\10\27\10\53\2\0\5\53\60\0\13\27\1\53\3\27"+
    "\1\53\4\27\1\53\27\27\5\53\20\0\1\7\7\0"+
    "\64\27\14\0\2\53\62\27\22\53\12\0\12\17\6\0"+
    "\22\53\6\27\3\0\1\27\1\0\1\27\2\53\12\17"+
    "\34\27\10\53\2\0\27\27\15\53\14\0\35\27\3\0"+
    "\4\53\57\27\16\53\16\0\1\27\12\17\6\0\5\27"+
    "\1\53\12\27\12\17\5\27\1\0\51\27\16\53\11\0"+
    "\3\27\1\53\10\27\2\53\2\0\12\17\6\0\27\27"+
    "\3\0\1\27\3\53\62\27\1\53\1\27\3\53\2\27"+
    "\2\53\5\27\2\53\1\27\1\53\1\27\30\0\3\27"+
    "\2\0\13\27\5\53\2\0\3\27\2\53\12\0\6\27"+
    "\2\0\6\27\2\0\6\27\11\0\7\27\1\0\7\27"+
    "\1\0\53\27\1\0\12\27\2\53\10\0\163\27\10\53"+
    "\1\0\2\53\2\0\12\17\6\0\244\27\14\0\27\27"+
    "\4\0\61\27\4\0\156\27\2\0\152\27\46\0\7\27"+
    "\14\0\5\27\5\0\1\27\1\53\12\27\1\0\15\27"+
    "\1\0\5\27\1\0\1\27\1\0\2\27\1\0\2\27"+
    "\1\0\154\27\41\0\153\27\22\0\100\27\2\0\66\27"+
    "\50\0\14\27\1\7\3\0\20\53\20\0\20\53\3\0"+
    "\2\27\30\0\3\27\31\0\1\7\6\0\5\27\1\0"+
    "\207\27\7\0\1\7\13\0\12\17\7\0\32\27\4\0"+
    "\1\27\1\0\32\27\13\0\131\27\3\0\6\27\2\0"+
    "\6\27\2\0\6\27\2\0\3\27\3\0\2\7\3\0"+
    "\2\7\31\0\14\27\1\0\32\27\1\0\23\27\1\0"+
    "\2\27\1\0\17\27\2\0\16\27\42\0\173\27\105\0"+
    "\65\27\210\0\1\53\202\0\35\27\3\0\61\27\17\0"+
    "\1\53\37\0\40\27\15\0\36\27\5\0\46\27\5\53"+
    "\5\0\36\27\2\0\44\27\4\0\10\27\1\0\5\27"+
    "\52\0\236\27\2\0\12\17\6\0\44\27\4\0\44\27"+
    "\4\0\50\27\10\0\64\27\234\0\67\27\11\0\26\27"+
    "\12\0\10\27\230\0\6\27\2\0\1\27\1\0\54\27"+
    "\1\0\2\27\3\0\1\27\2\0\27\27\12\0\27\27"+
    "\11\0\37\27\101\0\23\27\1\0\2\27\12\0\26\27"+
    "\12\0\32\27\106\0\70\27\6\0\2\27\100\0\1\27"+
    "\3\53\1\0\2\53\5\0\4\53\4\27\1\0\3\27"+
    "\1\0\33\27\2\53\2\0\3\53\4\0\1\53\40\0"+
    "\35\27\3\0\35\27\43\0\10\27\1\0\34\27\2\53"+
    "\31\0\66\27\12\0\26\27\12\0\23\27\15\0\22\27"+
    "\156\0\111\27\67\0\63\27\15\0\63\27\15\0\50\53"+
    "\10\0\12\17\306\0\35\53\12\0\1\53\10\0\41\53"+
    "\217\0\27\53\11\0\3\53\65\27\17\53\37\0\12\17"+
    "\17\0\4\53\55\27\13\53\25\0\31\27\7\0\12\17"+
    "\6\0\3\53\44\27\16\53\1\0\12\17\4\0\3\53"+
    "\11\0\43\27\1\53\2\0\1\27\11\0\3\53\60\27"+
    "\16\53\4\27\4\0\4\53\3\0\12\17\1\27\1\0"+
    "\1\27\43\0\22\27\1\0\31\27\14\53\6\0\1\53"+
    "\101\0\7\27\1\0\1\27\1\0\4\27\1\0\17\27"+
    "\1\0\12\27\7\0\57\27\14\53\5\0\12\17\6\0"+
    "\4\53\1\0\10\27\2\0\2\27\2\0\26\27\1\0"+
    "\7\27\1\0\2\27\1\0\5\27\1\0\2\53\1\27"+
    "\7\53\2\0\2\53\2\0\3\53\2\0\1\27\6\0"+
    "\1\53\5\0\5\27\2\53\2\0\7\53\3\0\5\53"+
    "\213\0\65\27\22\53\4\27\5\0\12\17\4\0\2\53"+
    "\40\0\60\27\24\53\2\27\1\0\1\27\10\0\12\17"+
    "\246\0\57\27\7\53\2\0\11\53\27\0\4\27\2\53"+
    "\42\0\60\27\21\53\3\0\1\27\13\0\12\17\46\0"+
    "\53\27\16\53\7\0\12\17\66\0\32\27\1\53\2\0"+
    "\17\53\4\0\12\17\306\0\73\53\145\0\100\27\12\17"+
    "\25\0\1\27\240\0\10\53\2\0\56\53\2\0\10\53"+
    "\1\0\2\53\33\0\1\27\12\53\50\27\7\53\1\27"+
    "\4\53\10\0\1\53\10\0\1\27\13\53\50\27\2\53"+
    "\4\27\20\53\3\0\1\53\42\0\71\27\7\0\11\27"+
    "\1\0\45\27\10\53\1\0\10\53\1\27\17\0\12\17"+
    "\30\0\36\27\2\0\26\53\1\0\16\53\111\0\7\27"+
    "\1\0\2\27\1\0\46\27\6\53\3\0\1\53\1\0"+
    "\2\53\1\0\7\53\1\27\1\53\10\0\12\17\6\0"+
    "\6\53\1\0\2\53\1\0\45\53\1\0\2\53\1\0"+
    "\6\53\7\0\12\17\u0136\0\27\53\11\0\232\27\146\0"+
    "\157\27\21\0\304\27\274\0\57\27\321\0\107\27\271\0"+
    "\71\27\7\0\37\27\1\0\12\17\146\0\36\27\2\0"+
    "\5\53\13\0\60\27\7\53\11\0\4\27\14\0\12\17"+
    "\11\0\25\27\5\0\23\27\260\0\100\53\200\0\105\27"+
    "\6\53\4\0\1\53\1\27\67\53\7\0\4\53\15\27"+
    "\100\0\2\27\1\0\1\53\34\0\355\27\13\53\10\0"+
    "\363\27\15\0\37\27\61\0\3\53\21\0\4\53\10\0"+
    "\u018c\27\4\0\153\27\5\0\15\27\3\0\11\27\7\0"+
    "\12\27\3\0\2\53\306\0\5\53\3\0\6\53\10\0"+
    "\10\53\2\0\7\53\36\0\4\53\224\0\3\53\273\0"+
    "\125\27\1\0\107\27\1\0\2\27\2\0\1\27\2\0"+
    "\2\27\2\0\4\27\1\0\14\27\1\0\1\27\1\0"+
    "\7\27\1\0\101\27\1\0\4\27\2\0\10\27\1\0"+
    "\7\27\1\0\34\27\1\0\4\27\1\0\5\27\1\0"+
    "\1\27\3\0\7\27\1\0\u0154\27\2\0\31\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\37\27\1\0\31\27\1\0\37\27\1\0"+
    "\31\27\1\0\10\27\2\0\62\17\67\53\4\0\62\53"+
    "\10\0\1\53\16\0\1\53\26\0\5\53\1\0\17\53"+
    "\120\0\7\53\1\0\21\53\2\0\7\53\1\0\2\53"+
    "\1\0\5\53\325\0\55\53\3\0\16\53\2\0\12\17"+
    "\4\0\1\53\u0171\0\60\53\12\17\6\0\305\27\13\0"+
    "\7\53\51\0\104\27\10\53\4\0\12\17\246\0\4\27"+
    "\1\0\33\27\1\0\2\27\1\0\1\27\2\0\1\27"+
    "\1\0\12\27\1\0\4\27\1\0\1\27\1\0\1\27"+
    "\6\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\1\27\2\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\0\1\27\2\0\4\27\1\0\7\27"+
    "\1\0\4\27\1\0\4\27\1\0\1\27\1\0\12\27"+
    "\1\0\21\27\5\0\3\27\1\0\5\27\1\0\21\27"+
    "\164\0\32\53\6\0\32\53\6\0\32\53\166\0\327\27"+
    "\51\0\65\27\13\0\336\27\2\0\u0182\27\16\0\u0131\27"+
    "\37\0\36\27\342\0\360\53\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\1\1\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\12\4\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\27\1\30\1\31\1\4\1\32"+
    "\5\4\1\33\1\34\1\4\1\35\3\4\1\36\1\37"+
    "\1\40\1\41\1\42\1\4\1\43\1\4\1\44\5\4"+
    "\1\45\1\4\1\46\1\4\1\47\2\4\1\50\2\4"+
    "\1\51\1\52\3\4\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\130\0\260\0\334\0\130"+
    "\0\u0108\0\u0134\0\130\0\130\0\130\0\130\0\130\0\130"+
    "\0\130\0\130\0\u0160\0\130\0\u018c\0\u01b8\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\130\0\130\0\u03c8\0\130\0\u03f4\0\130\0\u0160"+
    "\0\130\0\130\0\130\0\u0420\0\u0134\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0134\0\u0134\0\u0528\0\u0134\0\u0554\0\u0580"+
    "\0\u05ac\0\130\0\130\0\130\0\130\0\u0134\0\u05d8\0\u0134"+
    "\0\u0604\0\u0134\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u0134"+
    "\0\u070c\0\u0134\0\u0738\0\u0134\0\u0764\0\u0790\0\u0134\0\u07bc"+
    "\0\u07e8\0\u0134\0\u0134\0\u0814\0\u0840\0\u086c\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\12"+
    "\1\32\1\33\1\12\1\34\3\12\1\35\1\36\1\12"+
    "\1\37\1\40\1\41\1\12\1\3\1\12\1\42\1\43"+
    "\1\3\2\44\2\3\1\44\1\45\41\44\1\46\4\44"+
    "\55\0\1\4\54\0\1\5\74\0\1\47\30\0\2\11"+
    "\1\5\51\11\17\0\2\12\4\0\22\12\1\0\1\12"+
    "\2\0\1\12\17\0\2\23\27\0\1\50\26\0\1\51"+
    "\53\0\1\52\53\0\1\53\47\0\2\12\4\0\12\12"+
    "\1\54\7\12\1\0\1\12\2\0\1\12\17\0\2\12"+
    "\4\0\21\12\1\55\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\10\12\1\56\1\12\1\57\7\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\1\60\12\12"+
    "\1\61\1\62\5\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\5\12\1\63\14\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\14\12\1\64\5\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\4\12\1\65"+
    "\15\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\13\12\1\66\1\67\5\12\1\0\1\12\2\0\1\12"+
    "\17\0\2\12\4\0\12\12\1\70\7\12\1\0\1\12"+
    "\2\0\1\12\17\0\2\12\4\0\6\12\1\71\13\12"+
    "\1\0\1\12\2\0\1\12\2\44\2\0\1\44\1\0"+
    "\41\44\1\0\4\44\5\0\1\72\31\0\1\73\1\0"+
    "\1\74\1\0\1\75\27\0\2\12\4\0\3\12\1\76"+
    "\16\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\15\12\1\77\4\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\3\12\1\100\16\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\10\12\1\101\11\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\14\12\1\102"+
    "\5\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\13\12\1\103\6\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\16\12\1\104\3\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\17\12\1\105\2\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\3\12\1\106"+
    "\16\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\7\12\1\107\12\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\4\12\1\110\15\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\15\12\1\111\4\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\11\12\1\112"+
    "\10\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\17\12\1\113\2\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\4\12\1\114\15\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\4\12\1\115\15\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\10\12\1\116"+
    "\11\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\4\12\1\117\15\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\14\12\1\120\5\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\5\12\1\121\14\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\4\12\1\122"+
    "\15\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\12\12\1\123\7\12\1\0\1\12\2\0\1\12\17\0"+
    "\2\12\4\0\7\12\1\124\12\12\1\0\1\12\2\0"+
    "\1\12\17\0\2\12\4\0\12\12\1\125\7\12\1\0"+
    "\1\12\2\0\1\12\17\0\2\12\4\0\4\12\1\126"+
    "\15\12\1\0\1\12\2\0\1\12\17\0\2\12\4\0"+
    "\3\12\1\127\16\12\1\0\1\12\2\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\2\1\10\11"+
    "\1\1\1\11\15\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\0\3\11\16\1\4\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	private final Symbols sym = new Symbols();
	StringBuffer string = new StringBuffer();
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new IllegalSymbol(yyline, yycolumn, yytext());
            }
            // fall through
          case 44: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 45: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 46: break;
          case 4:
            { return symbol(sym.IDENTIFIER);
            }
            // fall through
          case 47: break;
          case 5:
            { return symbol(sym.ROUND_OPEN);
            }
            // fall through
          case 48: break;
          case 6:
            { return symbol(sym.ROUND_CLOSED);
            }
            // fall through
          case 49: break;
          case 7:
            { return symbol(sym.ASTERISK);
            }
            // fall through
          case 50: break;
          case 8:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 51: break;
          case 9:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 52: break;
          case 10:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 53: break;
          case 11:
            { return symbol(sym.SLASH);
            }
            // fall through
          case 54: break;
          case 12:
            { return symbol(sym.INTEGER);
            }
            // fall through
          case 55: break;
          case 13:
            { return symbol(sym.COLON);
            }
            // fall through
          case 56: break;
          case 14:
            { return symbol(sym.LESS);
            }
            // fall through
          case 57: break;
          case 15:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 58: break;
          case 16:
            { return symbol(sym.GREATER);
            }
            // fall through
          case 59: break;
          case 17:
            { return symbol(sym.CURLY_OPEN);
            }
            // fall through
          case 60: break;
          case 18:
            { return symbol(sym.CURLY_CLOSED);
            }
            // fall through
          case 61: break;
          case 19:
            { string.append(yytext());
            }
            // fall through
          case 62: break;
          case 20:
            { yybegin(YYINITIAL);
                          return symbol(sym.STRING_LITERAL, string.toString());
            }
            // fall through
          case 63: break;
          case 21:
            { string.append('\\');
            }
            // fall through
          case 64: break;
          case 22:
            { return symbol(sym.NOT_EQUAL);
            }
            // fall through
          case 65: break;
          case 23:
            { return symbol(sym.LESS_EQUAL);
            }
            // fall through
          case 66: break;
          case 24:
            { return symbol(sym.EQUAL);
            }
            // fall through
          case 67: break;
          case 25:
            { return symbol(sym.GREATER_EQUAL);
            }
            // fall through
          case 68: break;
          case 26:
            { return symbol(sym.BY);
            }
            // fall through
          case 69: break;
          case 27:
            { return symbol(sym.IF);
            }
            // fall through
          case 70: break;
          case 28:
            { return symbol(sym.OR);
            }
            // fall through
          case 71: break;
          case 29:
            { return symbol(sym.TO);
            }
            // fall through
          case 72: break;
          case 30:
            { string.append('\"');
            }
            // fall through
          case 73: break;
          case 31:
            { string.append('\n');
            }
            // fall through
          case 74: break;
          case 32:
            { string.append('\r');
            }
            // fall through
          case 75: break;
          case 33:
            { string.append('\t');
            }
            // fall through
          case 76: break;
          case 34:
            { return symbol(sym.AND);
            }
            // fall through
          case 77: break;
          case 35:
            { return symbol(sym.END);
            }
            // fall through
          case 78: break;
          case 36:
            { return symbol(sym.FOR);
            }
            // fall through
          case 79: break;
          case 37:
            { return symbol(sym.ELSE);
            }
            // fall through
          case 80: break;
          case 38:
            { return symbol(sym.FROM);
            }
            // fall through
          case 81: break;
          case 39:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 82: break;
          case 40:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 83: break;
          case 41:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 84: break;
          case 42:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 85: break;
          case 43:
            { return symbol(sym.UNDEFINED);
            }
            // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
