package ch.ffhs.fac.flang.parser;

/*
 FLang Lexer
*/

import java_cup.runtime.*;

import ch.ffhs.fac.flang.parser.exceptions.IllegalSymbol;

/**
 * Autogenerated lexer for Flang - see flang.jflex
 */

%%

%class Lexer
%public
%final
%unicode
%cup
%line
%column
%ignorecase

 
%{
	private final Symbols sym = new Symbols();
%}

%{
	StringBuffer string = new StringBuffer();
	
	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
%}

/* macros */
LINE                           = \r|\r\n|\n
SPACE                          = [\f\t\ ]+
WHITESPACE                     = {SPACE}|{LINE}
COMMENT                        = #[^\n]*\n?

IDENTIFIER                     = [:jletter:](\w|\d)*
INTEGER                        = ([1-9][\d_]*\d)|\d

%state STRING

%%


<YYINITIAL> {
	/* keywords */
	"true"             { return symbol(sym.TRUE); }
	"false"            { return symbol(sym.FALSE); }
	"undefined"        { return symbol(sym.UNDEFINED); }
	"for"              { return symbol(sym.FOR); }
	"from"             { return symbol(sym.FROM); }
	"to"               { return symbol(sym.TO); }
	"by"               { return symbol(sym.BY); }
	"while"            { return symbol(sym.WHILE); }
	"if"               { return symbol(sym.IF); }
	"else"             { return symbol(sym.ELSE); }
	"end"              { return symbol(sym.END); }
	"return"           { return symbol(sym.RETURN); }
	"and"              { return symbol(sym.AND); }
	"or"               { return symbol(sym.OR); }
	
	/* arithmetic */
	"("               { return symbol(sym.ROUND_OPEN); }
	")"               { return symbol(sym.ROUND_CLOSED); }
	"{"               { return symbol(sym.CURLY_OPEN); }
	"}"               { return symbol(sym.CURLY_CLOSED); }
	"="               { return symbol(sym.ASSIGN); }
	":"               { return symbol(sym.COLON); }
	","               { return symbol(sym.COMMA); }
	"+"               { return symbol(sym.PLUS); }
	"-"               { return symbol(sym.MINUS); }
	"*"               { return symbol(sym.ASTERISK); }
	"/"               { return symbol(sym.SLASH); }
	"=="              { return symbol(sym.EQUAL); }
	"!="              { return symbol(sym.NOT_EQUAL); }
	"<"               { return symbol(sym.LESS); }
	"<="              { return symbol(sym.LESS_EQUAL); }
	">"               { return symbol(sym.GREATER); }
	">="              { return symbol(sym.GREATER_EQUAL); }
	
	/* literals */
	{IDENTIFIER}      { return symbol(sym.IDENTIFIER); }
	{INTEGER}         { return symbol(sym.INTEGER); }
	\"                { string.setLength(0); yybegin(STRING); }
	
	/* comments&whitespaces */
	{COMMENT}         { /* ignore */ }
	{WHITESPACE}      { /* ignore */ }
}


<STRING> {
 	\"                {
 	                      yybegin(YYINITIAL);
                          return symbol(sym.STRING_LITERAL, string.toString());
                      }
 	[^\n\r\"\\]+      { string.append(yytext()); }
 	\\t               { string.append('\t'); }
 	\\n               { string.append('\n'); }

 	\\r               { string.append('\r'); }
 	\\\"              { string.append('\"'); }
 	\\                { string.append('\\'); }
}

/* error fallback */
[^]                   { throw new IllegalSymbol(yyline, yycolumn, yytext()); }